//////////////////////////////////////////////////////////////////////////////
//
// Description:  Returns the state.
//
// Remarks: 
//
// Arguments:
//
// Returns:  A boolean.
//
//////////////////////////////////////////////////////////////////////////////
inline bool
CLaneChangeCond::GetActive() const
{

	return m_active;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the state.
//
// Remarks:
//
// Arguments:
//   active - The new state.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetActive( const bool active )
{

	m_active = active;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Gets the urgency.
//
// Remarks:  
//
// Arguments:
//
// Returns:  A double which represents the urgency.
//
//////////////////////////////////////////////////////////////////////////////
inline double
CLaneChangeCond::GetUrgency() const
{

	return m_urgency;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the urgency.
//
// Remarks:  
//
// Arguments:
//   urgency - The new urgency.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void 
CLaneChangeCond::SetUrgency( const double urgency )
{

	m_urgency = urgency;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Returns whether we have a target lane or corridor..
//
// Remarks: 
//
// Arguments:
//
// Returns:  A boolean.
//
//////////////////////////////////////////////////////////////////////////////
inline bool
CLaneChangeCond::IsTargLane() const
{

	return m_isTargLane;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Gets the target lane.
//
// Remarks:  
//
// Arguments:
//
// Returns:  A CLane representing the target lane.
//
//////////////////////////////////////////////////////////////////////////////
inline const CLane& 
CLaneChangeCond::GetTargLane() const
{

	return m_targLane;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the target lane.
//
// Remarks:  
//
// Arguments:
//   targLane - The new target lane.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetTargLane( const CLane& targLane )
{

	m_targLane = targLane;
	m_isTargLane = true;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Gets the target corridor.
//
// Remarks:  
//
// Arguments:
//
// Returns:  A CCrdr representing the target corridor.
//
//////////////////////////////////////////////////////////////////////////////
inline const CCrdr& 
CLaneChangeCond::GetTargCrdr() const
{

	return m_targCrdr;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the target corridor.
//
// Remarks:  
//
// Arguments:
//   targCrdr - The new target corridor.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetTargCrdr( const CCrdr& targCrdr )
{

	m_targCrdr = targCrdr;
	m_isTargLane = false;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Returns the type.
//
// Remarks: 
//
// Arguments:
//
// Returns:  An enumeration representing the type.
//
//////////////////////////////////////////////////////////////////////////////
inline ELcCondition
CLaneChangeCond::GetType() const
{

	return m_type;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the type.
//
// Remarks:
//
// Arguments:
//   type - The new type.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetType( const ELcCondition type )
{

	m_type = type;

}


//////////////////////////////////////////////////////////////////////////////
//
// Description:  Finds out if this is a  lane change to the left.
//
// Remarks: 
//
// Arguments:
//
// Returns:  A boolean.
//
//////////////////////////////////////////////////////////////////////////////
inline bool
CLaneChangeCond::IsLeftLaneChange() const
{

	return m_leftLaneChange;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the lane change direction with a boolean indicating
//  if it's lane change to the left or right.
//
// Remarks:
//
// Arguments:
//   leftLaneChange - The lane change direction.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetLeftLaneChange( const bool leftLaneChange )
{

	m_leftLaneChange = leftLaneChange;

}


//////////////////////////////////////////////////////////////////////////////
//
// Description:  Finds out if this is a forced lane offset.
//
// Remarks: 
//
// Arguments:
//
// Returns:  A boolean.
//
//////////////////////////////////////////////////////////////////////////////
inline bool
CLaneChangeCond::IsForcedLaneOffset() const
{

	return m_isForcedLaneOffset;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the forced lane offset.
//
// Remarks:
//
// Arguments:
//   isForcedLaneOffset - The lane change direction.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetIsForcedLaneOffset( bool isForcedLaneOffset )
{

	m_isForcedLaneOffset = isForcedLaneOffset;

}



//////////////////////////////////////////////////////////////////////////////
//
// Description:  Gets the forced lane offset.
//
// Remarks:  
//
// Arguments:
//
// Returns:  A double which represents the forced lane offset.
//
//////////////////////////////////////////////////////////////////////////////
inline double
CLaneChangeCond::GetForcedLaneOffset() const
{

	return m_forcedLaneOffset;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets the forced lane offset.
//
// Remarks:  
//
// Arguments:
//   forcedLaneOffset - The new forced lane offset.
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void 
CLaneChangeCond::SetForcedLaneOffset( double forcedLaneOffset )
{

	m_forcedLaneOffset = forcedLaneOffset;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Finds out if turn signal should be skipped.
//
// Remarks: 
//
// Arguments:
//
// Returns:  A boolean.
//
//////////////////////////////////////////////////////////////////////////////
inline bool
CLaneChangeCond::IsSkipSignal() const
{

	return m_skipSignal;

}

//////////////////////////////////////////////////////////////////////////////
//
// Description:  Sets whether to skip the lane change signal.
//
// Remarks:
//
// Arguments:
//   skipSignal - Skip the lane change signal?
//
// Returns:
//
//////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetSkipSignal( bool skipSignal )
{

	m_skipSignal = skipSignal;

}
/////////////////////////////////////////////////////////////////////////////////
///\remark
///     Set if we are "finishing a lane chage" so we can turn off the turn signal
///     Start looking at if we need to start converging 
////////////////////////////////////////////////////////////////////////////////
inline bool 
CLaneChangeCond::IsFinishing() const{
    return m_isFinishing;
}
/////////////////////////////////////////////////////////////////////////////////
///\remark
///     Are we "finishing a lane chage" so we can turn off the turn signal
///     and start looking at if we need to start converging 
////////////////////////////////////////////////////////////////////////////////
inline void
CLaneChangeCond::SetFinishing(bool isFinishing){
    m_isFinishing = isFinishing;
}
/////////////////////////////////////////////////////////////////////////////////
///\remark
///     
////////////////////////////////////////////////////////////////////////////////
inline void   
CLaneChangeCond::SetScenarioInducedAbort(bool val){
    m_scenarioInducedAbort = val;
}
/////////////////////////////////////////////////////////////////////////////////
///\remark
///     
////////////////////////////////////////////////////////////////////////////////
inline bool   
CLaneChangeCond::GetScenarioInducedAbort(){
    return m_scenarioInducedAbort;
}