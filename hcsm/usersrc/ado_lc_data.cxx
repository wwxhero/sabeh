/***********************************************************************************
 * 
 * Version:ado_lc_data.cxx
 *
 * Version: $Id: ado_lc_data.cxx,v 1.15 2015/11/17 16:41:44 IOWA\dheitbri Exp $

 * Author:SUNIL BULUSU

 * Created: April, 2004 
 * Updated: May, 2005 
 *
 * Contains the following: 
 * 1. cLONGDIST[20][24][10]
 * 2. cTIME[20][24][10]
 * 
 * LcLookupDistTime(double velocity, double urgency, int solId, double &longDist, double &time)
 * --------------------------------------------------------------------------------
 * 3. LookupDistTime function is used to interpolate the Long Dist and
 *    time when Velocity and corresponding Urgency are given
 *    Parameters: 
 *    Velocity, Urgency, references to Long Dist and Time
 * 
 * LcLookupVelocityfromDist(double dist, double urgency, int solId, double& velocity) 
 * ---------------------------------------------------------------------------------
 * 4. LookupVelocityfromDist functions takes input as the forward distance,
 *	  urgency and solID and returns a velocity with which the distance can be achieved
 * 
 *    Parameters:
 *	  Distance, Urgency, solId, and reference to Velocity
 * 
 * LcLookupVelocityfromDist(double dist, int solId, vector<vector<double> >)
 * ---------------------------------------------------------------------------------
 * 5. LookupVelocityfromDist functions takes input as the forward distance,
 *	  and solID and returns a vector that consists of matching velocity-urgency pairs
 * 
 *    Parameters:
 *	  Distance, solId, and reference to a Vector
 * 
 * LcLookupVelocityfromTime(double time, double urgency, int solId, double& velocity) 
 * ---------------------------------------------------------------------------------
 * 6. LookupVelocityfromTime functions takes input as time, urgency and solID and 
 *	  returns a velocity with which Lc can be achieved in the given time
 *
 *    Parameters:
 *	  Time, Urgency, solId, and reference to Velocity
 *
 * LcLookupVelocityfromTime(double dist, int solId, vector<vector<double> >)
 * ---------------------------------------------------------------------------------
 * 7. LookupVelocityfromTime functions takes input as time, solId and 
 *	  and returns a vector that consists of matching velocity-urgency pairs with which
 *	  Lc can be achieved
 *
 *    Parameters:
 *	  Distance, solId, and reference to a Vector
 * LcLookupUrgencyfromDist(double velocity, double Dist, int solId, double &urgency)
 * ---------------------------------------------------------------------
 * 8. Searching the Table for the Urgency when Velocity and Distance are given
 *	  Parameters:
 *	  Velocity, Distance and reference to the Urgency variable
 *
 * LcLookupUrgencyfromTime(double Velocity, double time, int solId, double &urgency)
 * --------------------------------------------------------------------
 * 9. Searching the Table for the Urgency when Velocity and Time are given
 *    Parameters:
 *	  Velocity, Time and reference to the Urgency variable		
 *
 * Return Type: bool
 *
 *
 * WARNING: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DO NOT ALTER IT
 *
 ***********************************************************************************/

#include <iostream>
#include <map>
#include <vector>

using namespace std;
using std::map;

#undef DEBUG_MAIN			// Test program
#undef DEBUG_CALC			// Printing the Calculations
#undef DEBUG_SEARCH_DIST	// Debugging the LookupUrgencyfromDist function
#undef DEBUG_SEARCH_TIME	// Debugging the LookupUrgencyfromTime function
#undef DEBUG_SEARCH_VEL		// Debugging the LookupVelocityfromDist function


//
// Mapping function
//
static int solIdIndex=0;
map<int,int> solIdToIndexMap; // solIdIndex -> solId

//
// Longitudinal Distance
//
// [20] corresponds to various SOL MODELS
// [24] corresponds to Velocities from 5mph - 120mph
// [10] corresponds to Urgencies from 0.1 - 1.0
const double cLONGDIST[20][24][10] = 
{
	/***** Audi - 1 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 143.32, 136.55, 130.63 }, 
		{ 281.39, 254.46, 232.16, 213.78, 198.33, 185.08, 173.79, 163.48, 154.62, 152.15 }, 
		{ 330.37, 294.02, 265.01, 241.86, 222.75, 207.66, 199.56, 190.72, 184.08, 179.65 }, 
		{ 367.31, 324.24, 289.97, 261.57, 242.46, 234.12, 221.36, 216.45, 209.57, 205.15 }, 
		{ 396.94, 346.79, 307.63, 283.14, 269.66, 256.18, 241.48, 230.44, 224.92, 220.62 }, 
		{ 420.66, 363.42, 320.84, 303.20, 288.51, 273.08, 259.11, 248.82, 234.11, 229.70 }, 
		{ 439.52, 377.88, 343.62, 316.20, 302.49, 288.77, 271.63, 260.48, 245.04, 243.32 }, 
		{ 455.43, 388.90, 350.73, 333.10, 306.67, 291.97, 277.28, 265.52, 247.88, 251.78 }, 
		{ 510.22, 428.78, 391.35, 356.12, 335.20, 317.57, 295.54, 287.82, 261.39, 243.76 }, 
		{ 579.17, 486.26, 432.45, 398.21, 355.40, 334.60, 321.14, 304.00, 275.86, 280.74 }, 
		{ 647.89, 548.38, 458.27, 411.20, 377.56, 362.76, 350.64, 327.76, 290.09, 290.08 }, 
		{ 724.42, 611.47, 524.91, 439.82, 416.34, 372.32, 351.76, 345.89, 313.60, 307.71 }, 
		{ 797.53, 675.17, 573.46, 476.51, 436.77, 409.74, 382.72, 371.58, 352.50, 327.06 }, 
		{ 869.16, 733.97, 636.42, 544.00, 482.38, 444.72, 417.33, 395.07, 376.23, 360.82 }, 
		{ 945.92, 795.58, 691.07, 597.55, 511.36, 487.51, 454.50, 428.82, 403.14, 388.46 }, 
		{ 1026.60, 866.24, 750.85, 649.14, 574.81, 516.13, 488.74, 461.35, 433.96, 416.35 }, 
		{ 1105.31, 939.08, 812.33, 710.51, 619.06, 560.87, 521.38, 494.36, 469.41, 442.39 }, 
		{ 1187.90, 1007.50, 871.10, 767.69, 673.08, 607.06, 565.25, 527.84, 505.83, 483.82 }, 
		{ 1285.71, 1081.46, 939.88, 819.19, 733.30, 661.34, 603.30, 575.45, 547.59, 517.40 }, 
		{ 1372.13, 1157.27, 1005.88, 878.91, 791.00, 707.97, 644.47, 610.28, 578.53, 551.66 }, 
		{ 1460.37, 1232.34, 1073.48, 942.80, 845.44, 763.43, 696.80, 650.67, 622.49, 591.74 }, 
		{ 1558.45, 1319.71, 1142.67, 1003.18, 906.60, 812.71, 745.63, 689.29, 659.77, 630.26 }, 
		{ 1659.03, 1398.40, 1207.83, 1070.51, 966.81, 868.72, 793.03, 736.97, 694.92, 664.09 }, 
		{ 1770.85, 1487.40, 1285.76, 1139.65, 1022.76, 929.23, 847.40, 788.95, 736.34, 707.11 } 
	},

	/***** BMW_StationWagon - 19 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 145.54, 138.65, 132.24, 126.44 }, 
		{ 271.35, 245.39, 224.08, 206.42, 191.71, 178.70, 167.90, 156.84, 154.12, 149.68 }, 
		{ 318.26, 283.74, 256.56, 233.41, 215.39, 203.24, 195.87, 187.40, 181.50, 177.43 }, 
		{ 354.58, 312.49, 279.69, 254.71, 238.04, 225.78, 218.90, 209.58, 202.21, 199.26 }, 
		{ 383.48, 334.55, 294.77, 278.24, 259.25, 246.38, 239.02, 230.43, 223.07, 212.65 }, 
		{ 405.25, 349.47, 320.83, 297.33, 286.30, 265.00, 248.82, 240.00, 234.11, 232.62 }, 
		{ 424.96, 362.46, 338.48, 312.77, 288.78, 277.63, 263.06, 252.76, 236.47, 237.31 }, 
		{ 441.73, 374.22, 349.74, 334.07, 308.62, 285.12, 268.46, 260.61, 242.00, 245.90 }, 
		{ 511.32, 429.88, 391.35, 367.13, 334.10, 318.68, 296.64, 285.62, 280.10, 263.57 }, 
		{ 576.73, 491.15, 414.12, 379.87, 356.62, 355.38, 302.80, 305.23, 277.08, 280.73 }, 
		{ 650.58, 552.42, 460.96, 412.54, 374.87, 362.76, 326.43, 325.07, 294.12, 291.42 }, 
		{ 720.02, 610.00, 524.91, 442.75, 414.87, 373.78, 354.69, 348.82, 329.74, 304.78 }, 
		{ 797.53, 671.99, 573.46, 492.40, 452.67, 427.23, 384.31, 368.40, 354.09, 328.64 }, 
		{ 865.74, 732.26, 631.29, 544.00, 484.09, 448.14, 417.32, 386.51, 376.23, 362.53 }, 
		{ 942.26, 799.25, 683.73, 597.55, 511.36, 487.51, 450.83, 428.82, 406.81, 388.46 }, 
		{ 1022.69, 866.24, 746.93, 655.01, 572.86, 514.17, 486.78, 461.35, 435.91, 416.35 }, 
		{ 1103.23, 930.77, 814.40, 700.11, 621.14, 558.79, 529.69, 498.51, 467.33, 446.54 }, 
		{ 1187.90, 1005.30, 871.10, 761.09, 677.47, 602.66, 567.45, 530.04, 505.83, 483.82 }, 
		{ 1278.74, 1086.11, 932.92, 823.83, 726.34, 656.70, 610.26, 573.12, 545.26, 515.08 }, 
		{ 1374.57, 1152.38, 1001.00, 883.79, 786.12, 705.53, 644.47, 612.72, 573.65, 551.66 }, 
		{ 1468.06, 1240.03, 1073.48, 945.37, 842.87, 763.43, 699.36, 650.67, 617.36, 584.04 }, 
		{ 1561.13, 1319.71, 1148.03, 1005.86, 906.60, 820.76, 745.63, 694.65, 659.78, 627.58 }, 
		{ 1661.83, 1401.20, 1210.64, 1070.51, 964.00, 865.91, 804.24, 739.77, 697.73, 666.89 }, 
		{ 1767.93, 1487.40, 1291.61, 1136.73, 1025.68, 923.39, 847.40, 791.87, 736.34, 701.26 } 
	},

	/***** DodgeNeon - 35 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 147.75, 139.63, 132.24, 125.58, 120.27, 114.84 }, 
		{ 245.39, 222.36, 203.24, 187.53, 173.79, 162.00, 153.63, 149.93, 147.70, 142.03 }, 
		{ 288.51, 257.29, 233.04, 210.98, 199.93, 191.45, 185.55, 178.54, 173.38, 167.46 }, 
		{ 319.83, 283.12, 249.81, 238.04, 228.23, 214.49, 208.59, 201.22, 190.91, 188.94 }, 
		{ 344.95, 300.28, 279.46, 262.31, 246.38, 237.18, 231.04, 216.94, 213.87, 204.05 }, 
		{ 364.15, 319.37, 301.73, 284.10, 265.73, 248.08, 235.58, 229.69, 225.27, 216.43 }, 
		{ 383.87, 344.47, 319.63, 300.77, 281.91, 263.05, 250.18, 244.17, 231.30, 221.85 }, 
		{ 441.73, 375.19, 349.74, 321.35, 310.57, 285.12, 267.48, 259.64, 259.62, 246.88 }, 
		{ 509.12, 427.68, 391.35, 351.72, 336.30, 318.68, 295.55, 285.62, 260.29, 265.78 }, 
		{ 580.40, 486.26, 419.00, 385.98, 354.18, 333.38, 321.14, 305.23, 275.86, 278.29 }, 
		{ 650.58, 548.38, 462.31, 415.23, 373.53, 362.76, 327.77, 326.42, 290.09, 291.42 }, 
		{ 721.49, 608.54, 516.11, 442.75, 413.40, 372.31, 357.63, 348.82, 312.13, 306.25 }, 
		{ 794.35, 671.99, 581.41, 492.40, 438.36, 411.33, 384.31, 371.58, 350.91, 325.47 }, 
		{ 872.58, 735.68, 631.29, 545.71, 482.38, 444.72, 415.61, 395.07, 376.23, 362.53 }, 
		{ 949.59, 799.25, 689.23, 597.55, 513.19, 476.51, 450.83, 428.82, 404.97, 388.46 }, 
		{ 1028.56, 868.19, 750.85, 651.10, 570.90, 516.12, 484.83, 461.35, 432.00, 412.44 }, 
		{ 1109.46, 939.08, 806.09, 702.19, 627.38, 556.71, 523.46, 494.36, 469.41, 446.54 }, 
		{ 1196.70, 1011.90, 866.70, 767.69, 681.88, 602.66, 567.45, 532.24, 505.83, 481.62 }, 
		{ 1281.06, 1081.46, 935.24, 826.15, 730.98, 659.02, 603.30, 566.15, 542.94, 515.08 }, 
		{ 1372.13, 1157.27, 1003.44, 878.91, 795.88, 707.97, 649.35, 607.83, 576.09, 551.66 }, 
		{ 1468.06, 1232.34, 1070.92, 947.93, 842.87, 763.43, 696.80, 653.24, 619.92, 589.16 }, 
		{ 1566.50, 1314.35, 1139.99, 1003.17, 906.60, 810.02, 745.63, 691.97, 654.40, 627.58 }, 
		{ 1664.63, 1401.20, 1216.23, 1070.50, 964.00, 863.10, 798.63, 736.96, 700.53, 658.48 }, 
		{ 1765.00, 1490.32, 1285.75, 1139.64, 1022.75, 923.38, 847.40, 783.10, 742.17, 701.26 } 
	},

	/***** Escape - 37 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 147.63, 139.38, 132.48, 125.95, 120.03, 114.83 }, 
		{ 245.39, 222.36, 203.24, 187.54, 173.79, 162.00, 153.63, 150.17, 145.73, 141.79 }, 
		{ 288.51, 257.66, 231.93, 211.34, 199.56, 191.45, 185.55, 178.91, 173.74, 170.05 }, 
		{ 320.32, 283.12, 249.81, 238.04, 228.23, 214.00, 208.59, 200.74, 190.91, 188.94 }, 
		{ 345.56, 300.28, 279.46, 262.31, 246.38, 236.57, 225.53, 218.16, 205.90, 204.66 }, 
		{ 364.88, 325.24, 301.73, 284.10, 266.46, 258.37, 235.58, 229.69, 225.27, 216.43 }, 
		{ 383.01, 344.47, 319.63, 300.77, 281.91, 263.05, 252.75, 244.17, 230.44, 221.85 }, 
		{ 438.79, 375.20, 348.77, 320.38, 310.57, 287.07, 268.46, 258.66, 242.00, 245.90 }, 
		{ 512.42, 428.78, 380.35, 352.82, 337.40, 320.87, 296.65, 284.52, 261.39, 264.68 }, 
		{ 579.17, 488.70, 417.78, 382.31, 361.51, 330.94, 322.36, 306.45, 275.87, 279.51 }, 
		{ 650.58, 553.76, 459.62, 413.88, 373.53, 362.76, 326.43, 325.07, 291.44, 291.42 }, 
		{ 721.49, 610.00, 523.45, 441.29, 416.34, 375.25, 351.76, 345.88, 313.59, 304.78 }, 
		{ 794.35, 671.99, 573.46, 478.10, 438.36, 428.82, 384.31, 371.58, 354.09, 327.06 }, 
		{ 869.16, 732.26, 634.71, 537.15, 468.68, 451.57, 413.90, 389.93, 377.94, 352.26 }, 
		{ 942.26, 799.24, 689.23, 604.88, 516.86, 480.18, 454.50, 428.82, 406.81, 392.13 }, 
		{ 1020.73, 866.24, 746.93, 653.05, 572.85, 520.04, 486.78, 461.35, 433.96, 416.34 }, 
		{ 1109.46, 939.08, 808.17, 706.35, 625.30, 565.02, 531.77, 496.43, 475.65, 454.86 }, 
		{ 1190.10, 1007.50, 866.70, 761.09, 677.47, 607.06, 565.25, 532.24, 503.63, 483.82 }, 
		{ 1278.74, 1081.46, 932.92, 828.47, 737.94, 656.69, 610.26, 575.44, 542.94, 519.72 }, 
		{ 1367.25, 1154.82, 1003.43, 886.23, 786.11, 712.85, 651.79, 615.16, 580.97, 549.22 }, 
		{ 1468.06, 1227.22, 1070.92, 942.80, 845.43, 763.43, 699.37, 653.23, 625.04, 591.73 }, 
		{ 1555.76, 1314.35, 1139.98, 1005.86, 901.24, 823.43, 748.31, 691.96, 659.77, 627.57 }, 
		{ 1661.83, 1404.00, 1213.43, 1073.30, 961.20, 871.51, 798.63, 736.97, 697.72, 666.89 }, 
		{ 1770.84, 1490.31, 1285.76, 1142.57, 1028.59, 929.23, 853.25, 794.78, 745.10, 710.03 } 
	},

	/***** FordTaurus - 38 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 147.88, 139.39, 132.24, 125.95, 120.15, 114.84 }, 
		{ 245.88, 222.36, 203.48, 187.05, 173.79, 162.49, 153.88, 150.17, 145.74, 142.03 }, 
		{ 288.15, 258.03, 233.04, 211.71, 200.66, 194.40, 185.55, 178.54, 173.38, 167.10 }, 
		{ 319.83, 282.63, 249.81, 238.04, 228.23, 219.39, 208.10, 201.23, 191.40, 187.96 }, 
		{ 346.17, 299.67, 279.46, 261.70, 246.38, 235.35, 231.65, 218.16, 205.90, 204.66 }, 
		{ 367.08, 320.10, 293.66, 282.63, 265.73, 247.35, 235.58, 229.69, 215.71, 215.70 }, 
		{ 382.16, 344.47, 309.35, 299.06, 281.91, 273.33, 249.33, 242.46, 231.31, 221.86 }, 
		{ 439.77, 384.00, 346.81, 319.40, 308.62, 298.81, 282.17, 261.59, 240.05, 230.24 }, 
		{ 506.92, 429.88, 389.15, 351.72, 335.20, 316.47, 297.75, 285.62, 279.01, 264.68 }, 
		{ 577.95, 486.26, 416.56, 381.09, 357.85, 332.16, 301.57, 284.44, 300.32, 277.06 }, 
		{ 647.90, 551.07, 462.31, 415.23, 378.90, 342.58, 349.30, 303.55, 292.78, 294.11 }, 
		{ 724.42, 607.07, 519.04, 444.22, 416.34, 400.19, 353.23, 331.21, 332.67, 307.71 }, 
		{ 791.17, 670.40, 573.46, 476.51, 441.54, 409.74, 384.31, 358.86, 352.50, 328.64 }, 
		{ 867.45, 730.55, 627.86, 547.42, 480.67, 449.85, 419.04, 396.78, 377.94, 353.97 }, 
		{ 944.09, 801.08, 685.56, 597.55, 516.86, 476.51, 450.83, 421.48, 399.47, 386.63 }, 
		{ 1024.65, 870.14, 744.98, 649.14, 572.86, 514.17, 486.78, 461.35, 433.96, 414.39 }, 
		{ 1109.46, 934.92, 814.40, 706.35, 621.14, 558.79, 525.53, 500.59, 469.41, 448.62 }, 
		{ 1187.90, 1009.70, 868.90, 763.29, 675.28, 607.06, 567.45, 534.44, 505.83, 481.62 }, 
		{ 1278.74, 1076.82, 937.56, 823.83, 730.98, 656.69, 605.62, 568.48, 540.62, 512.76 }, 
		{ 1369.69, 1157.27, 1013.20, 881.35, 786.11, 715.29, 644.47, 607.83, 576.08, 551.66 }, 
		{ 1465.50, 1227.21, 1073.48, 940.24, 845.43, 763.43, 699.36, 648.11, 625.04, 589.16 }, 
		{ 1563.81, 1319.71, 1139.98, 1008.54, 903.91, 820.75, 750.99, 694.65, 657.09, 622.21 }, 
		{ 1661.82, 1401.20, 1216.24, 1070.50, 964.00, 874.31, 793.02, 739.76, 700.53, 669.70 }, 
		{ 1762.07, 1487.39, 1288.68, 1142.57, 1025.68, 926.31, 850.32, 786.02, 745.10, 698.33 } 
	},

	/***** Towncar - 42 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 147.51, 139.51, 132.37, 125.95, 120.28, 115.08 }, 
		{ 245.64, 222.12, 203.73, 187.04, 174.28, 162.49, 154.12, 150.17, 145.25, 142.03 }, 
		{ 287.78, 256.93, 233.04, 211.34, 199.56, 194.03, 185.18, 178.55, 173.38, 166.73 }, 
		{ 319.84, 283.12, 253.24, 238.53, 227.74, 218.90, 208.59, 201.23, 191.40, 187.96 }, 
		{ 344.95, 300.28, 279.46, 261.70, 253.11, 235.96, 225.53, 218.16, 206.51, 204.05 }, 
		{ 366.35, 318.63, 292.93, 281.90, 265.73, 248.82, 235.58, 228.23, 216.45, 215.71 }, 
		{ 379.59, 336.76, 318.77, 288.78, 281.91, 262.19, 250.18, 243.31, 232.15, 221.00 }, 
		{ 440.75, 371.29, 346.81, 334.07, 294.92, 284.14, 283.14, 258.66, 256.68, 245.90 }, 
		{ 511.32, 426.58, 389.15, 350.62, 337.40, 302.16, 295.54, 285.62, 277.91, 240.46 }, 
		{ 575.51, 491.15, 419.00, 384.76, 354.18, 332.15, 304.01, 284.44, 296.65, 278.30 }, 
		{ 647.89, 544.35, 454.24, 412.54, 376.21, 364.10, 330.46, 306.24, 316.99, 292.76 }, 
		{ 715.62, 602.67, 514.65, 457.43, 423.67, 394.33, 351.76, 328.28, 329.74, 307.71 }, 
		{ 788.00, 664.05, 583.00, 473.33, 454.26, 416.10, 384.31, 362.05, 339.78, 327.06 }, 
		{ 862.32, 732.26, 619.31, 544.00, 466.98, 436.16, 419.04, 398.49, 379.66, 365.95 }, 
		{ 942.26, 797.41, 691.07, 597.55, 515.02, 474.68, 450.83, 428.82, 397.63, 381.12 }, 
		{ 1020.73, 868.19, 748.89, 653.05, 576.77, 516.13, 480.91, 461.35, 437.87, 416.35 }, 
		{ 1107.39, 937.00, 806.09, 710.50, 623.22, 560.86, 523.45, 496.43, 469.41, 444.47 }, 
		{ 1190.10, 1011.90, 873.30, 765.49, 673.08, 604.86, 567.45, 534.44, 501.43, 483.82 }, 
		{ 1278.74, 1076.82, 937.56, 828.47, 730.98, 661.34, 603.30, 575.44, 542.94, 515.08 }, 
		{ 1374.57, 1159.71, 998.55, 891.11, 793.44, 715.29, 654.24, 617.60, 578.53, 551.66 }, 
		{ 1462.93, 1234.90, 1073.48, 942.80, 840.31, 760.87, 699.36, 650.67, 617.35, 586.60 }, 
		{ 1561.13, 1314.35, 1148.03, 1011.22, 903.92, 815.39, 745.63, 700.02, 657.09, 627.57 }, 
		{ 1661.82, 1398.39, 1216.23, 1076.10, 964.00, 868.71, 798.63, 736.96, 694.92, 666.89 }, 
		{ 1770.85, 1484.47, 1288.68, 1139.65, 1022.75, 923.38, 853.25, 788.94, 745.10, 707.10 } 
	},

	/***** Windstar - 43 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 147.63, 139.39, 132.24, 125.95, 120.15, 114.72 }, 
		{ 246.13, 222.36, 203.73, 187.78, 174.28, 161.75, 155.60, 150.17, 145.49, 142.28 }, 
		{ 288.15, 257.29, 232.31, 211.35, 200.29, 191.45, 185.55, 178.54, 173.74, 170.42 }, 
		{ 320.32, 283.12, 253.73, 238.53, 228.72, 214.00, 209.08, 201.72, 196.31, 187.96 }, 
		{ 344.95, 300.89, 279.46, 261.70, 246.99, 236.57, 224.31, 217.55, 212.64, 204.66 }, 
		{ 364.15, 317.90, 301.00, 281.90, 266.46, 248.82, 245.87, 229.69, 225.27, 216.43 }, 
		{ 383.01, 343.62, 319.63, 300.77, 282.77, 263.05, 251.04, 242.46, 232.16, 221.85 }, 
		{ 441.73, 375.19, 347.79, 322.33, 310.57, 287.07, 267.49, 259.64, 241.03, 245.91 }, 
		{ 508.02, 428.78, 391.35, 352.82, 336.30, 318.68, 296.65, 285.62, 260.29, 265.78 }, 
		{ 579.17, 488.70, 412.89, 383.54, 359.07, 338.27, 322.36, 305.23, 275.87, 280.74 }, 
		{ 647.90, 553.76, 459.62, 409.85, 373.53, 362.76, 325.09, 325.07, 292.78, 290.08 }, 
		{ 724.42, 612.94, 519.04, 442.75, 416.34, 376.71, 375.24, 348.82, 313.59, 304.78 }, 
		{ 794.35, 670.40, 573.46, 492.40, 444.72, 409.74, 384.31, 374.76, 352.50, 327.06 }, 
		{ 872.58, 733.97, 633.00, 544.00, 482.38, 448.14, 413.90, 396.78, 376.23, 362.53 }, 
		{ 949.59, 795.58, 689.23, 597.55, 516.86, 483.85, 450.83, 432.49, 403.14, 388.46 }, 
		{ 1032.47, 868.19, 750.85, 660.88, 570.90, 516.13, 488.74, 461.35, 433.96, 414.39 }, 
		{ 1109.46, 934.92, 814.40, 702.19, 616.98, 556.71, 523.46, 494.36, 465.26, 452.78 }, 
		{ 1192.30, 1007.50, 871.10, 761.09, 677.48, 602.66, 560.85, 532.24, 505.83, 479.42 }, 
		{ 1281.06, 1081.46, 937.56, 821.51, 733.30, 656.70, 603.30, 570.80, 542.94, 515.08 }, 
		{ 1367.25, 1157.27, 1001.00, 876.46, 781.23, 707.97, 644.47, 610.28, 576.09, 551.66 }, 
		{ 1465.50, 1237.46, 1068.36, 947.93, 840.31, 763.43, 694.24, 650.67, 619.92, 584.04 }, 
		{ 1561.13, 1314.35, 1142.67, 1008.54, 903.92, 815.38, 745.63, 697.33, 654.41, 627.58 }, 
		{ 1670.23, 1401.20, 1210.63, 1070.51, 955.59, 860.30, 795.83, 734.16, 692.13, 661.28 }, 
		{ 1765.00, 1481.56, 1285.76, 1133.80, 1022.75, 923.38, 853.24, 783.09, 736.33, 707.10 } 
	},

	/***** Deville - 56 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 147.63, 139.51, 132.36, 125.70, 120.03, 114.83 }, 
		{ 245.39, 222.36, 203.24, 187.04, 173.79, 162.00, 153.63, 150.17, 145.24, 142.28 }, 
		{ 288.15, 257.66, 231.93, 211.34, 199.56, 191.45, 185.55, 178.91, 173.37, 166.36 }, 
		{ 320.32, 283.12, 249.81, 238.04, 228.23, 214.49, 208.59, 201.71, 190.42, 188.94 }, 
		{ 345.56, 300.89, 279.46, 262.31, 246.38, 236.57, 225.53, 218.16, 205.29, 204.66 }, 
		{ 364.88, 318.63, 301.73, 282.63, 266.46, 248.82, 244.40, 229.69, 225.27, 216.44 }, 
		{ 383.01, 345.33, 319.63, 300.77, 281.91, 263.05, 251.04, 244.17, 232.16, 221.85 }, 
		{ 441.73, 375.20, 349.74, 323.31, 310.57, 285.12, 267.49, 260.62, 259.62, 245.91 }, 
		{ 508.02, 428.78, 380.35, 352.82, 336.30, 318.68, 296.65, 285.62, 261.38, 265.78 }, 
		{ 579.17, 488.70, 430.01, 383.54, 359.07, 328.49, 322.36, 305.23, 275.87, 280.74 }, 
		{ 650.59, 545.70, 459.62, 430.02, 374.87, 362.76, 327.77, 325.08, 291.44, 290.08 }, 
		{ 718.56, 612.94, 521.98, 441.29, 416.34, 372.32, 351.76, 348.82, 313.59, 304.78 }, 
		{ 794.35, 673.58, 568.69, 492.40, 438.36, 411.33, 381.13, 368.41, 339.78, 327.06 }, 
		{ 869.16, 732.26, 633.00, 547.42, 484.09, 444.72, 413.90, 396.78, 376.23, 362.54 }, 
		{ 944.09, 799.25, 689.23, 599.38, 513.19, 487.52, 450.83, 428.82, 403.14, 388.46 }, 
		{ 1026.60, 868.19, 750.85, 651.10, 568.95, 523.95, 488.74, 461.35, 432.00, 418.30 }, 
		{ 1109.46, 937.00, 810.25, 710.50, 619.06, 560.87, 527.61, 494.36, 465.26, 448.62 }, 
		{ 1196.70, 1007.50, 866.70, 765.49, 677.48, 602.66, 567.45, 532.24, 505.83, 481.62 }, 
		{ 1285.70, 1083.78, 937.56, 821.51, 733.30, 659.02, 607.94, 563.84, 535.98, 515.08 }, 
		{ 1372.13, 1157.27, 996.11, 878.91, 781.23, 707.97, 644.47, 610.28, 578.53, 551.66 }, 
		{ 1460.37, 1234.90, 1070.92, 947.93, 850.56, 760.87, 696.80, 648.11, 619.92, 594.29 }, 
		{ 1561.13, 1319.71, 1142.67, 1008.54, 901.23, 815.38, 745.63, 691.97, 654.41, 627.58 }, 
		{ 1661.82, 1406.80, 1216.23, 1064.89, 964.00, 863.10, 795.83, 734.16, 694.92, 666.89 }, 
		{ 1759.15, 1490.31, 1291.60, 1139.64, 1022.75, 920.46, 847.39, 783.09, 742.18, 701.26 } 
	},

	/***** PEUGEOT_306 - 67 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 143.33, 136.06, 129.40, 123.48, 118.05 }, 
		{ 252.74, 229.22, 209.12, 192.20, 179.19, 166.42, 157.08, 151.16, 146.72, 142.78 }, 
		{ 296.59, 264.64, 239.29, 217.96, 204.72, 195.87, 187.03, 182.60, 174.11, 170.05 }, 
		{ 330.11, 291.93, 260.59, 240.00, 230.19, 220.37, 208.11, 205.64, 195.82, 191.89 }, 
		{ 355.35, 310.07, 281.91, 263.54, 252.50, 242.08, 230.43, 221.84, 208.97, 208.34 }, 
		{ 376.62, 328.18, 303.21, 283.37, 265.73, 254.70, 241.47, 234.10, 220.86, 220.12 }, 
		{ 395.00, 346.19, 317.92, 305.06, 278.49, 269.05, 257.05, 249.32, 234.74, 224.43 }, 
		{ 440.75, 385.95, 348.76, 321.36, 296.88, 286.09, 267.48, 259.64, 256.69, 246.88 }, 
		{ 508.02, 427.68, 373.75, 351.72, 333.00, 316.47, 294.44, 284.52, 259.19, 264.68 }, 
		{ 580.40, 486.26, 419.00, 398.21, 359.07, 354.16, 322.36, 304.01, 281.97, 280.74 }, 
		{ 647.89, 548.38, 459.62, 415.23, 376.22, 361.41, 346.60, 302.21, 295.47, 291.42 }, 
		{ 720.02, 608.54, 516.11, 461.82, 414.87, 373.78, 356.17, 328.28, 313.59, 309.18 }, 
		{ 795.94, 670.40, 575.05, 473.33, 436.77, 408.15, 382.72, 374.76, 341.37, 327.05 }, 
		{ 869.16, 732.26, 627.87, 547.42, 480.67, 448.14, 417.33, 398.49, 376.23, 362.53 }, 
		{ 944.09, 802.91, 692.90, 601.22, 527.86, 485.68, 450.83, 419.64, 403.14, 388.46 }, 
		{ 1028.56, 872.10, 750.85, 649.14, 570.90, 516.12, 484.83, 461.35, 432.00, 414.39 }, 
		{ 1105.31, 941.16, 806.09, 704.27, 619.06, 560.86, 523.46, 494.36, 469.41, 446.54 }, 
		{ 1196.70, 1007.50, 877.70, 765.49, 677.47, 602.66, 563.05, 534.44, 508.03, 483.82 }, 
		{ 1276.42, 1081.46, 932.92, 821.51, 726.34, 659.02, 603.30, 575.44, 542.94, 515.08 }, 
		{ 1372.13, 1154.83, 1005.88, 878.91, 791.00, 707.96, 646.91, 610.28, 578.53, 551.66 }, 
		{ 1465.50, 1229.78, 1070.92, 942.80, 845.43, 771.12, 699.36, 655.80, 622.48, 586.60 }, 
		{ 1558.45, 1314.35, 1145.36, 1011.23, 901.23, 818.07, 753.68, 691.97, 659.77, 619.53 }, 
		{ 1664.63, 1401.20, 1213.43, 1076.11, 964.00, 865.90, 795.83, 734.16, 694.92, 661.29 }, 
		{ 1765.00, 1490.31, 1285.76, 1139.64, 1022.76, 929.23, 847.40, 788.94, 736.33, 707.11 } 
	},

	/***** VW_passat - 69 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 144.18, 137.04, 130.88, 124.96 }, 
		{ 268.17, 242.70, 221.87, 204.71, 189.50, 176.74, 165.93, 157.08, 152.15, 147.71 }, 
		{ 314.95, 281.17, 253.99, 231.20, 212.82, 202.88, 192.93, 188.13, 182.60, 178.17 }, 
		{ 350.67, 309.07, 277.24, 250.79, 238.04, 227.25, 219.40, 210.56, 204.17, 195.82 }, 
		{ 377.98, 329.65, 293.55, 272.73, 260.47, 248.83, 241.47, 225.53, 218.79, 209.58 }, 
		{ 401.58, 345.07, 315.69, 292.19, 279.69, 267.93, 252.50, 244.40, 231.16, 229.68 }, 
		{ 420.69, 353.90, 331.62, 316.20, 294.77, 269.92, 268.19, 247.62, 244.18, 232.16 }, 
		{ 442.71, 375.19, 349.74, 323.31, 310.57, 285.12, 271.40, 261.60, 242.00, 245.90 }, 
		{ 510.22, 428.78, 378.15, 353.92, 337.40, 316.48, 296.64, 286.72, 259.19, 265.77 }, 
		{ 580.40, 485.04, 420.23, 385.98, 355.40, 332.15, 318.69, 305.23, 273.42, 280.74 }, 
		{ 650.59, 545.69, 459.62, 412.54, 395.05, 362.76, 349.30, 325.08, 292.78, 290.08 }, 
		{ 722.96, 610.01, 514.64, 442.75, 416.34, 378.18, 353.23, 348.82, 312.13, 304.78 }, 
		{ 794.35, 671.99, 581.41, 476.51, 441.54, 409.74, 384.31, 369.99, 352.50, 327.06 }, 
		{ 870.87, 735.68, 629.58, 544.00, 482.38, 444.72, 413.90, 386.51, 379.66, 362.53 }, 
		{ 949.59, 799.25, 689.23, 597.55, 527.86, 483.85, 452.67, 426.99, 403.14, 388.46 }, 
		{ 1028.56, 868.19, 748.89, 653.05, 570.90, 516.13, 488.74, 463.30, 435.91, 414.39 }, 
		{ 1109.47, 939.08, 814.40, 702.19, 616.99, 565.03, 523.46, 496.43, 465.26, 448.62 }, 
		{ 1194.50, 1014.10, 868.90, 758.89, 675.28, 604.86, 565.25, 534.44, 503.63, 481.62 }, 
		{ 1278.74, 1088.42, 932.92, 828.47, 737.94, 661.34, 607.94, 570.80, 545.26, 515.08 }, 
		{ 1364.81, 1159.71, 1001.00, 881.35, 793.44, 710.41, 649.35, 612.72, 583.41, 554.11 }, 
		{ 1468.06, 1237.46, 1070.92, 947.93, 845.43, 758.31, 696.80, 650.68, 617.35, 586.61 }, 
		{ 1563.82, 1319.71, 1142.67, 1008.54, 903.92, 807.34, 745.63, 697.33, 659.77, 619.53 }, 
		{ 1664.63, 1398.40, 1221.84, 1067.70, 955.60, 871.51, 798.63, 736.97, 700.53, 661.29 }, 
		{ 1762.08, 1487.40, 1291.60, 1139.65, 1022.75, 929.23, 847.40, 786.02, 736.34, 707.11 } 
	},

	/***** LandRover - 71 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 149.85, 142.09, 134.95, 128.91, 123.11 }, 
		{ 264.74, 239.02, 218.44, 201.27, 186.80, 174.28, 163.47, 155.85, 150.92, 146.97 }, 
		{ 310.55, 276.76, 250.68, 227.52, 208.04, 201.77, 192.19, 187.39, 181.49, 173.75 }, 
		{ 344.80, 303.68, 272.83, 248.83, 237.06, 226.26, 214.49, 210.55, 199.75, 195.82 }, 
		{ 372.48, 325.37, 286.81, 272.11, 259.86, 247.60, 234.73, 226.75, 220.01, 209.58 }, 
		{ 394.24, 339.93, 313.49, 292.18, 278.96, 259.12, 254.69, 237.05, 232.63, 220.86 }, 
		{ 412.13, 352.19, 329.91, 317.05, 293.91, 273.35, 257.91, 250.18, 233.89, 235.59 }, 
		{ 439.77, 377.15, 347.79, 334.07, 310.57, 285.12, 269.44, 260.62, 242.98, 245.91 }, 
		{ 509.12, 429.88, 379.25, 368.23, 336.30, 318.67, 296.65, 285.62, 261.39, 263.58 }, 
		{ 576.73, 488.70, 419.01, 383.53, 356.62, 332.15, 321.14, 306.45, 275.86, 280.74 }, 
		{ 653.27, 549.73, 459.62, 430.03, 373.53, 362.76, 346.61, 327.76, 292.78, 290.07 }, 
		{ 722.96, 608.54, 523.45, 439.82, 416.33, 375.25, 354.70, 328.27, 313.59, 306.24 }, 
		{ 794.35, 670.40, 575.05, 476.51, 441.54, 414.51, 384.31, 373.17, 350.91, 327.05 }, 
		{ 862.32, 732.26, 634.71, 544.00, 482.38, 448.14, 415.61, 396.78, 377.95, 362.53 }, 
		{ 949.59, 801.08, 691.07, 601.22, 518.69, 474.68, 450.83, 419.65, 406.81, 390.30 }, 
		{ 1026.60, 868.19, 750.85, 649.14, 572.86, 527.86, 484.83, 461.35, 433.96, 414.39 }, 
		{ 1103.23, 934.92, 812.33, 702.19, 619.06, 558.79, 519.30, 492.28, 467.33, 452.78 }, 
		{ 1190.10, 1007.50, 866.70, 765.49, 681.88, 604.86, 563.05, 532.24, 505.83, 483.82 }, 
		{ 1278.74, 1086.10, 937.56, 823.83, 735.62, 663.66, 607.94, 563.84, 542.94, 515.08 }, 
		{ 1367.25, 1157.27, 1005.88, 883.79, 786.12, 707.97, 644.47, 605.39, 576.09, 551.67 }, 
		{ 1465.50, 1240.03, 1068.36, 945.37, 842.87, 763.43, 696.80, 653.24, 619.92, 594.29 }, 
		{ 1561.13, 1314.35, 1142.67, 1008.54, 901.24, 810.02, 745.63, 691.97, 654.41, 630.26 }, 
		{ 1661.83, 1398.40, 1213.43, 1073.30, 966.81, 865.90, 793.03, 736.97, 694.92, 658.49 }, 
		{ 1765.00, 1484.47, 1285.76, 1139.65, 1022.75, 923.39, 847.40, 783.10, 736.34, 707.11 } 
	},

	/***** Ambulance - 72 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 326.68, 295.10, 269.88, 248.82, 230.20, 215.01, 201.27, 189.50, 178.70, 169.86 }, 
		{ 382.86, 341.75, 309.08, 281.90, 259.13, 240.03, 223.48, 208.40, 199.56, 195.88 }, 
		{ 426.51, 377.09, 336.96, 305.64, 279.20, 256.67, 240.99, 237.06, 223.33, 216.45 }, 
		{ 460.54, 403.06, 359.02, 322.31, 289.27, 277.02, 264.15, 250.06, 247.60, 234.12 }, 
		{ 487.43, 423.59, 375.89, 332.59, 312.02, 292.19, 281.17, 265.00, 254.71, 249.56 }, 
		{ 508.86, 441.23, 388.15, 345.34, 324.77, 312.78, 287.93, 285.35, 264.78, 261.34 }, 
		{ 529.77, 453.47, 388.90, 369.32, 336.05, 327.23, 303.73, 287.08, 280.22, 260.63 }, 
		{ 547.63, 465.10, 393.56, 374.85, 339.61, 330.79, 306.56, 292.24, 282.32, 265.80 }, 
		{ 579.17, 486.26, 419.01, 378.65, 356.62, 332.15, 321.14, 305.23, 274.64, 280.74 }, 
		{ 647.89, 547.04, 459.62, 413.88, 376.22, 360.07, 327.77, 326.42, 294.13, 288.73 }, 
		{ 722.96, 608.54, 516.11, 441.29, 414.87, 376.71, 354.70, 347.35, 313.59, 304.78 }, 
		{ 797.53, 673.58, 573.46, 476.51, 436.77, 411.33, 384.31, 366.82, 352.50, 327.06 }, 
		{ 869.16, 735.68, 631.29, 544.00, 480.67, 448.14, 417.33, 396.78, 376.23, 352.26 }, 
		{ 949.59, 799.25, 687.40, 597.55, 513.19, 476.51, 450.83, 421.48, 406.81, 386.63 }, 
		{ 1028.56, 872.10, 752.80, 649.14, 574.81, 518.08, 484.83, 461.35, 433.96, 414.39 }, 
		{ 1105.31, 937.00, 814.41, 706.35, 619.06, 567.11, 523.46, 494.36, 465.26, 444.47 }, 
		{ 1192.30, 1009.70, 871.10, 765.49, 677.48, 602.66, 563.05, 532.24, 508.03, 483.82 }, 
		{ 1281.07, 1081.47, 937.56, 826.15, 733.31, 659.02, 603.30, 566.16, 542.94, 517.40 }, 
		{ 1372.14, 1157.27, 1005.88, 878.91, 781.23, 707.97, 649.36, 610.28, 578.53, 551.67 }, 
		{ 1465.50, 1234.91, 1070.92, 942.81, 840.31, 763.44, 696.80, 655.80, 619.92, 584.05 }, 
		{ 1561.14, 1319.72, 1134.63, 1008.54, 901.24, 810.02, 742.95, 691.97, 659.77, 630.26 }, 
		{ 1661.84, 1404.01, 1216.24, 1076.11, 966.81, 868.71, 795.84, 739.78, 697.73, 669.70 }, 
		{ 1762.09, 1484.48, 1285.77, 1139.66, 1025.69, 932.17, 844.49, 788.96, 742.19, 701.27 } 
	},

	/***** Police - 84 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 145.91, 139.01, 132.85 }, 
		{ 286.53, 258.86, 236.33, 217.95, 202.26, 188.27, 176.74, 165.93, 156.59, 151.42 }, 
		{ 335.88, 299.53, 270.89, 247.37, 226.79, 209.87, 201.40, 192.56, 185.56, 180.39 }, 
		{ 373.67, 329.63, 294.87, 266.96, 245.89, 237.06, 227.74, 217.92, 210.56, 200.74 }, 
		{ 403.06, 352.90, 311.91, 285.59, 271.50, 257.41, 248.83, 239.02, 224.92, 220.62 }, 
		{ 426.53, 370.76, 324.51, 306.14, 289.98, 276.75, 258.39, 248.82, 241.47, 229.69 }, 
		{ 446.37, 385.58, 348.76, 321.34, 304.21, 288.78, 271.63, 261.34, 256.19, 242.47 }, 
		{ 466.19, 394.77, 355.62, 336.04, 306.67, 292.96, 273.37, 264.54, 259.64, 245.92 }, 
		{ 510.22, 429.88, 380.35, 351.72, 337.39, 318.68, 296.65, 285.62, 261.38, 264.68 }, 
		{ 579.17, 487.48, 417.78, 383.54, 357.84, 330.93, 319.91, 307.67, 297.87, 277.07 }, 
		{ 645.21, 544.35, 459.62, 412.54, 395.05, 362.76, 327.77, 323.73, 292.78, 292.77 }, 
		{ 724.42, 611.47, 516.11, 445.69, 416.34, 395.79, 351.77, 348.82, 313.59, 304.78 }, 
		{ 797.53, 673.58, 581.41, 492.40, 438.36, 412.92, 389.07, 358.86, 350.91, 328.65 }, 
		{ 872.58, 733.97, 629.58, 547.42, 480.67, 444.72, 413.90, 395.07, 376.23, 352.26 }, 
		{ 949.59, 802.91, 687.40, 597.55, 511.36, 483.85, 450.83, 428.82, 404.97, 386.63 }, 
		{ 1028.56, 868.19, 750.85, 660.88, 574.81, 518.08, 484.83, 463.30, 439.83, 414.39 }, 
		{ 1107.39, 939.08, 808.17, 700.12, 623.22, 556.71, 523.46, 494.36, 469.41, 452.78 }, 
		{ 1198.90, 1009.70, 871.10, 765.49, 679.68, 602.66, 560.85, 532.24, 508.03, 481.63 }, 
		{ 1278.74, 1081.46, 932.92, 823.83, 730.98, 656.70, 603.30, 568.48, 538.30, 515.08 }, 
		{ 1369.69, 1157.27, 1005.88, 878.91, 786.12, 705.53, 646.91, 605.39, 576.09, 551.67 }, 
		{ 1462.94, 1234.90, 1065.80, 945.37, 853.12, 763.43, 696.80, 650.67, 619.92, 589.17 }, 
		{ 1566.50, 1314.35, 1142.67, 1008.54, 901.24, 815.39, 745.63, 691.97, 654.41, 622.22 }, 
		{ 1664.64, 1401.20, 1216.24, 1070.50, 958.40, 874.32, 795.83, 734.17, 694.93, 664.09 }, 
		{ 1765.01, 1490.32, 1285.76, 1139.65, 1022.76, 920.47, 853.25, 788.95, 742.18, 704.19 } 
	},

	/***** Freightliner_Semi - 101 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 385.89, 361.42, 339.88, 320.31, 303.66 }, 
		{ 0.00, 615.82, 554.93, 505.41, 465.05, 429.83, 400.84, 375.15, 352.03, 332.57 }, 
		{ 763.46, 673.98, 602.58, 546.34, 500.37, 461.24, 427.97, 398.13, 374.16, 351.65 }, 
		{ 819.98, 719.13, 640.28, 576.70, 525.35, 483.77, 447.09, 416.51, 389.60, 365.14 }, 
		{ 863.71, 752.23, 667.15, 600.40, 545.39, 502.10, 461.75, 428.73, 400.12, 372.96 }, 
		{ 899.94, 781.85, 691.15, 619.26, 560.21, 513.14, 472.05, 435.25, 405.28, 377.88 }, 
		{ 932.69, 805.57, 709.73, 635.40, 574.77, 523.90, 480.87, 445.65, 410.43, 375.21 }, 
		{ 959.11, 825.99, 728.08, 646.66, 585.05, 534.43, 488.22, 447.50, 408.98, 384.76 }, 
		{ 985.01, 845.66, 742.99, 662.31, 593.85, 540.06, 493.60, 445.91, 412.89, 381.10 }, 
		{ 1009.59, 865.73, 759.50, 674.79, 603.52, 545.70, 494.59, 439.45, 413.89, 382.95 }, 
		{ 1035.38, 884.31, 771.37, 684.82, 611.47, 552.79, 495.57, 448.62, 410.47, 401.67 }, 
		{ 1059.72, 902.41, 784.82, 695.83, 622.73, 554.39, 498.76, 447.90, 427.23, 414.51 }, 
		{ 1084.77, 922.21, 804.13, 708.30, 629.58, 561.12, 492.65, 468.69, 446.43, 417.33 }, 
		{ 1110.93, 945.92, 817.58, 724.07, 639.73, 571.88, 513.19, 480.18, 454.50, 432.49 }, 
		{ 1138.07, 962.07, 834.95, 731.29, 653.06, 578.73, 531.78, 492.65, 473.09, 445.70 }, 
		{ 1167.65, 982.72, 851.81, 752.07, 658.55, 589.97, 544.24, 515.14, 488.12, 465.26 }, 
		{ 1192.31, 1005.31, 871.10, 767.70, 681.88, 602.66, 565.25, 530.04, 505.84, 481.63 }, 
		{ 1281.07, 1086.11, 932.93, 821.51, 730.99, 659.02, 603.31, 566.16, 538.30, 519.73 }, 
		{ 1369.70, 1157.28, 1005.89, 883.80, 781.24, 707.98, 651.80, 610.29, 576.09, 551.67 }, 
		{ 1465.51, 1229.79, 1070.93, 947.94, 840.32, 763.44, 694.25, 650.68, 619.93, 594.30 }, 
		{ 1555.78, 1314.36, 1131.95, 1005.87, 901.25, 815.40, 745.64, 694.66, 654.42, 630.28 }, 
		{ 1664.65, 1401.22, 1210.65, 1070.52, 958.41, 863.12, 795.85, 739.79, 692.14, 658.50 }, 
		{ 1765.03, 1484.50, 1288.71, 1139.67, 1022.78, 923.41, 847.42, 783.12, 742.21, 698.37 } 
	},

	/***** ChevyBlazer - 2 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 145.54, 138.77, 132.11, 126.19 }, 
		{ 271.35, 245.39, 224.32, 206.67, 191.46, 178.70, 167.65, 157.08, 152.15, 149.68 }, 
		{ 318.63, 284.11, 257.29, 233.41, 214.66, 202.88, 195.87, 187.76, 181.86, 177.43 }, 
		{ 354.58, 313.47, 278.71, 250.79, 238.04, 226.27, 218.41, 209.58, 202.70, 198.77 }, 
		{ 383.48, 334.55, 294.16, 277.63, 259.86, 247.00, 239.02, 230.43, 224.29, 213.26 }, 
		{ 403.78, 350.20, 314.96, 298.79, 278.22, 265.00, 250.29, 240.73, 235.57, 223.80 }, 
		{ 424.11, 362.46, 338.48, 312.77, 300.77, 278.49, 262.20, 251.05, 249.32, 237.31 }, 
		{ 441.73, 375.20, 349.74, 322.33, 309.60, 285.12, 267.49, 259.63, 242.00, 246.88 }, 
		{ 509.12, 430.98, 391.35, 368.23, 334.10, 318.68, 296.64, 285.62, 264.69, 265.78 }, 
		{ 579.17, 491.15, 417.78, 385.98, 356.62, 332.15, 316.25, 305.23, 277.08, 280.74 }, 
		{ 650.59, 551.07, 458.27, 411.19, 393.70, 346.62, 327.77, 325.07, 292.78, 290.08 }, 
		{ 724.42, 612.94, 519.05, 442.75, 419.27, 375.25, 351.76, 348.82, 313.59, 303.31 }, 
		{ 794.35, 670.40, 575.05, 474.92, 436.77, 409.74, 384.31, 368.41, 350.91, 327.06 }, 
		{ 869.16, 735.68, 629.58, 547.42, 482.38, 448.14, 412.19, 396.78, 376.23, 350.54 }, 
		{ 947.76, 802.91, 691.07, 597.55, 513.19, 483.85, 450.83, 426.99, 403.14, 386.63 }, 
		{ 1026.60, 868.19, 743.02, 656.97, 570.90, 514.17, 484.83, 461.35, 433.96, 414.39 }, 
		{ 1109.46, 939.08, 810.25, 702.19, 619.06, 560.87, 523.46, 494.36, 473.57, 442.39 }, 
		{ 1196.70, 1005.30, 871.10, 763.29, 677.48, 604.86, 569.65, 532.24, 503.63, 481.62 }, 
		{ 1281.06, 1083.78, 937.56, 823.83, 733.30, 659.02, 607.94, 566.16, 535.98, 515.08 }, 
		{ 1374.58, 1157.27, 1001.00, 878.91, 791.00, 707.97, 646.91, 605.39, 573.65, 551.67 }, 
		{ 1468.06, 1234.90, 1070.92, 950.49, 842.87, 763.43, 696.80, 653.24, 619.92, 589.17 }, 
		{ 1561.13, 1319.71, 1142.67, 1000.49, 898.55, 807.34, 750.99, 691.97, 654.41, 622.21 }, 
		{ 1670.24, 1395.60, 1213.43, 1076.11, 966.80, 863.11, 795.83, 734.16, 697.73, 661.29 }, 
		{ 1770.85, 1484.47, 1285.76, 1136.73, 1022.75, 923.39, 841.56, 786.02, 742.18, 707.11 } 
	},

	/***** CementTruck - 18 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 345.27, 311.99, 284.57, 262.05, 242.94, 226.77, 212.55, 200.29, 189.25, 179.19 }, 
		{ 404.88, 361.21, 325.97, 298.06, 273.82, 253.62, 235.98, 220.91, 206.19, 198.83 }, 
		{ 451.45, 397.64, 356.54, 323.26, 294.87, 272.35, 249.81, 240.01, 234.12, 225.78 }, 
		{ 486.22, 425.07, 378.59, 341.28, 310.07, 284.98, 272.12, 262.32, 251.29, 243.93 }, 
		{ 514.57, 445.61, 395.71, 354.61, 322.31, 299.54, 287.05, 278.23, 267.20, 259.85 }, 
		{ 538.81, 465.20, 407.85, 358.19, 334.20, 318.78, 305.07, 287.07, 276.78, 269.06 }, 
		{ 559.12, 477.93, 417.27, 373.24, 344.86, 331.15, 306.68, 300.79, 291.97, 271.41 }, 
		{ 576.24, 492.61, 425.48, 389.16, 362.73, 334.11, 321.99, 304.36, 294.44, 272.41 }, 
		{ 596.29, 502.15, 419.01, 398.21, 367.63, 340.72, 307.69, 312.57, 281.98, 283.19 }, 
		{ 650.59, 552.42, 459.62, 412.54, 395.05, 364.10, 326.43, 329.11, 295.47, 287.39 }, 
		{ 724.42, 610.00, 524.91, 442.75, 416.33, 375.24, 351.77, 347.35, 316.52, 306.25 }, 
		{ 795.94, 673.58, 573.46, 476.51, 439.95, 409.74, 382.72, 371.58, 352.50, 327.05 }, 
		{ 872.58, 732.26, 634.71, 537.16, 485.80, 448.14, 415.61, 398.49, 376.24, 350.55 }, 
		{ 949.59, 799.25, 689.24, 597.55, 513.19, 483.85, 449.00, 419.65, 403.14, 388.46 }, 
		{ 1022.69, 864.28, 750.85, 656.97, 572.86, 518.08, 486.78, 461.35, 445.70, 414.39 }, 
		{ 1113.62, 937.00, 806.09, 706.35, 619.06, 569.18, 523.46, 494.36, 469.41, 444.47 }, 
		{ 1192.30, 1011.90, 866.70, 765.49, 677.48, 602.66, 565.25, 534.44, 505.83, 481.63 }, 
		{ 1288.03, 1081.47, 939.88, 821.51, 733.30, 659.02, 603.30, 570.80, 542.94, 515.08 }, 
		{ 1372.14, 1162.15, 1005.89, 888.68, 783.68, 712.86, 644.47, 607.84, 576.09, 551.67 }, 
		{ 1462.94, 1232.34, 1070.92, 945.37, 840.31, 760.87, 696.81, 650.68, 614.80, 589.17 }, 
		{ 1561.14, 1319.72, 1142.67, 1008.55, 901.24, 815.39, 742.95, 691.98, 654.41, 627.58 }, 
		{ 1664.64, 1398.41, 1213.44, 1073.31, 961.21, 871.52, 795.84, 739.78, 697.74, 661.30 }, 
		{ 1765.01, 1484.48, 1285.77, 1145.50, 1014.00, 932.17, 847.41, 786.03, 739.27, 701.28 } 
	},

	/***** DumpTruck - 36 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 330.84, 299.02, 273.31, 251.76, 233.14, 217.46, 203.73, 191.71, 181.40, 171.82 }, 
		{ 388.73, 346.53, 313.49, 285.21, 262.80, 243.33, 226.79, 211.72, 200.30, 196.61 }, 
		{ 432.86, 382.96, 341.86, 310.53, 283.12, 259.61, 245.89, 233.14, 228.23, 220.38 }, 
		{ 466.04, 409.17, 363.91, 327.21, 295.39, 283.14, 264.77, 256.19, 246.38, 239.02 }, 
		{ 494.03, 428.00, 379.57, 339.93, 312.03, 300.27, 279.70, 272.35, 261.32, 245.89 }, 
		{ 518.27, 446.37, 391.58, 345.34, 331.63, 308.50, 299.07, 281.93, 270.78, 256.20 }, 
		{ 537.60, 459.34, 398.68, 359.54, 335.07, 325.27, 312.54, 283.17, 274.35, 271.40 }, 
		{ 556.44, 472.81, 407.87, 375.94, 351.72, 329.70, 302.16, 304.35, 277.92, 256.99 }, 
		{ 577.95, 486.26, 416.56, 385.98, 356.62, 328.49, 322.36, 305.23, 300.32, 280.74 }, 
		{ 650.58, 548.38, 460.96, 411.19, 395.05, 368.14, 325.09, 306.24, 291.44, 290.07 }, 
		{ 721.49, 610.00, 516.11, 438.35, 414.87, 375.25, 351.76, 328.28, 312.13, 304.78 }, 
		{ 794.35, 673.58, 581.41, 476.51, 435.18, 412.92, 379.54, 358.86, 352.50, 327.05 }, 
		{ 869.16, 732.26, 633.00, 547.42, 482.38, 444.72, 422.46, 396.78, 376.23, 352.26 }, 
		{ 949.59, 793.75, 692.90, 601.22, 516.86, 480.18, 450.83, 428.82, 403.14, 388.46 }, 
		{ 1028.56, 868.19, 746.94, 649.14, 570.90, 516.13, 484.83, 461.35, 443.74, 416.35 }, 
		{ 1111.54, 939.08, 810.25, 702.19, 625.29, 558.79, 523.46, 494.36, 471.50, 450.71 }, 
		{ 1194.50, 1005.30, 871.10, 761.09, 677.48, 604.86, 565.25, 532.24, 505.83, 483.82 }, 
		{ 1281.06, 1081.47, 937.57, 826.15, 733.30, 659.02, 603.30, 568.48, 538.30, 515.08 }, 
		{ 1372.14, 1157.27, 1003.44, 888.68, 783.67, 707.97, 649.36, 607.84, 576.09, 551.67 }, 
		{ 1460.38, 1232.35, 1070.92, 947.93, 845.44, 763.44, 694.24, 648.12, 619.92, 589.17 }, 
		{ 1563.82, 1317.04, 1142.68, 1008.55, 895.88, 810.03, 748.32, 691.97, 654.41, 627.58 }, 
		{ 1659.04, 1398.40, 1216.24, 1070.51, 964.01, 868.72, 795.84, 736.98, 694.93, 661.29 }, 
		{ 1765.01, 1484.48, 1285.77, 1139.66, 1019.84, 929.24, 847.41, 783.11, 742.19, 707.12 } 
	},

	/***** GarbageTruck - 39 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 326.92, 295.10, 269.39, 248.09, 229.71, 214.76, 200.79, 189.25, 178.70, 169.61 }, 
		{ 382.86, 341.39, 308.35, 281.91, 259.87, 239.66, 223.48, 208.04, 199.56, 193.30 }, 
		{ 426.02, 376.11, 336.48, 305.64, 279.20, 256.67, 240.99, 233.14, 223.32, 215.97 }, 
		{ 459.32, 403.67, 359.02, 323.54, 294.16, 277.63, 264.15, 256.19, 246.38, 232.90 }, 
		{ 486.69, 425.06, 375.16, 332.59, 312.02, 292.19, 279.70, 265.00, 254.71, 248.09 }, 
		{ 508.00, 442.09, 386.44, 346.19, 324.77, 310.21, 289.64, 284.50, 263.07, 262.20 }, 
		{ 530.75, 452.49, 386.94, 361.49, 338.00, 314.50, 303.73, 287.08, 280.22, 258.68 }, 
		{ 546.53, 467.30, 411.17, 377.04, 340.71, 331.89, 307.66, 290.05, 284.52, 263.60 }, 
		{ 576.73, 486.26, 417.78, 388.42, 356.62, 330.93, 305.24, 305.23, 277.08, 280.74 }, 
		{ 653.27, 553.76, 459.62, 425.99, 376.22, 362.76, 327.77, 327.76, 292.78, 292.77 }, 
		{ 724.42, 610.00, 516.11, 441.29, 416.34, 375.25, 354.70, 348.82, 313.59, 310.65 }, 
		{ 792.76, 676.76, 571.87, 476.51, 443.13, 409.74, 387.48, 362.04, 352.50, 327.06 }, 
		{ 867.45, 733.97, 633.00, 544.00, 485.80, 446.43, 419.04, 396.78, 376.23, 352.26 }, 
		{ 949.59, 799.25, 689.23, 597.55, 516.86, 483.85, 452.67, 428.82, 404.97, 386.63 }, 
		{ 1028.56, 872.11, 750.85, 649.14, 568.95, 516.13, 484.83, 461.35, 433.96, 414.39 }, 
		{ 1109.47, 934.93, 810.25, 710.51, 627.38, 556.71, 519.30, 494.36, 465.26, 456.94 }, 
		{ 1194.50, 1007.50, 875.50, 767.69, 673.08, 602.66, 563.05, 532.24, 505.83, 483.82 }, 
		{ 1281.06, 1076.82, 930.60, 823.83, 730.99, 656.70, 603.30, 568.48, 540.62, 515.08 }, 
		{ 1372.14, 1157.27, 1001.00, 888.68, 786.12, 712.86, 654.24, 610.28, 583.42, 551.67 }, 
		{ 1462.94, 1240.03, 1070.92, 947.93, 845.44, 755.75, 696.80, 650.68, 614.80, 589.17 }, 
		{ 1566.50, 1319.72, 1145.36, 1005.87, 901.24, 810.02, 745.63, 691.98, 657.10, 624.90 }, 
		{ 1664.64, 1401.21, 1216.24, 1070.51, 958.40, 863.11, 798.64, 739.78, 694.93, 661.29 }, 
		{ 1765.01, 1484.48, 1285.77, 1139.66, 1019.84, 932.16, 847.41, 794.80, 736.35, 704.20 } 
	},

	/***** MailTruck - 40 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 149.35, 140.98, 133.84, 127.18, 121.51, 116.07 }, 
		{ 248.33, 224.81, 205.93, 189.50, 175.76, 163.97, 155.60, 150.18, 145.74, 144.01 }, 
		{ 291.45, 260.60, 234.87, 213.55, 200.30, 194.40, 185.55, 178.17, 173.01, 169.31 }, 
		{ 324.24, 286.06, 253.73, 238.04, 228.23, 218.41, 207.61, 199.76, 194.84, 186.97 }, 
		{ 349.23, 303.95, 279.46, 262.31, 250.67, 235.95, 229.82, 221.85, 210.80, 202.21 }, 
		{ 368.55, 325.97, 301.73, 279.69, 262.79, 254.70, 241.46, 234.10, 222.33, 212.03 }, 
		{ 387.30, 344.47, 320.48, 298.20, 278.49, 270.76, 257.90, 251.02, 237.31, 227.01 }, 
		{ 441.73, 373.24, 349.74, 320.38, 311.55, 285.12, 267.48, 258.66, 241.02, 245.90 }, 
		{ 511.32, 429.88, 388.05, 350.62, 318.69, 316.47, 294.45, 283.41, 260.29, 266.88 }, 
		{ 579.17, 489.93, 417.78, 382.31, 360.29, 329.71, 323.58, 300.33, 278.30, 277.08 }, 
		{ 650.58, 552.42, 459.62, 427.34, 395.05, 360.07, 325.09, 325.07, 316.99, 294.11 }, 
		{ 721.49, 612.94, 527.85, 442.75, 417.81, 394.32, 375.24, 348.82, 310.66, 304.78 }, 
		{ 794.35, 667.23, 575.05, 479.69, 438.36, 408.15, 387.49, 371.58, 352.50, 327.05 }, 
		{ 867.45, 737.39, 634.71, 547.42, 482.38, 446.43, 417.33, 396.78, 374.52, 362.53 }, 
		{ 945.92, 799.25, 692.90, 601.22, 513.19, 476.51, 450.83, 428.82, 401.31, 388.46 }, 
		{ 1028.56, 862.33, 748.89, 653.05, 574.81, 527.86, 488.74, 461.35, 433.96, 412.44 }, 
		{ 1103.23, 939.08, 816.48, 706.35, 623.22, 560.87, 521.38, 494.36, 475.65, 442.39 }, 
		{ 1196.70, 1009.70, 871.10, 758.89, 677.48, 604.86, 563.05, 530.04, 505.83, 483.82 }, 
		{ 1278.74, 1083.78, 937.56, 826.15, 728.66, 659.02, 603.30, 566.16, 542.94, 515.08 }, 
		{ 1372.13, 1162.15, 1001.00, 878.91, 778.79, 707.97, 649.35, 610.28, 585.86, 551.66 }, 
		{ 1465.50, 1234.90, 1070.92, 947.93, 842.87, 758.30, 696.80, 650.67, 617.36, 589.16 }, 
		{ 1563.81, 1311.66, 1139.99, 1008.54, 901.23, 812.71, 745.63, 697.33, 654.41, 622.21 }, 
		{ 1661.83, 1398.39, 1210.63, 1073.30, 958.39, 868.70, 798.63, 734.16, 697.72, 661.29 }, 
		{ 1767.93, 1484.47, 1291.61, 1133.80, 1022.75, 923.38, 844.47, 788.94, 742.18, 701.26 } 
	},

	/***** PhoneTruck - 41 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 144.68, 138.27 }, 
		{ 298.29, 269.39, 246.37, 226.77, 210.35, 196.37, 184.10, 173.54, 163.97, 155.85 }, 
		{ 350.20, 312.75, 281.54, 257.66, 237.08, 219.44, 204.35, 198.09, 190.71, 184.45 }, 
		{ 389.81, 343.82, 307.60, 279.20, 252.75, 239.51, 229.21, 222.83, 215.47, 210.06 }, 
		{ 420.18, 367.58, 326.60, 295.38, 279.46, 264.76, 248.83, 242.70, 235.34, 222.47 }, 
		{ 444.87, 386.90, 341.40, 314.96, 296.60, 281.90, 265.00, 251.77, 244.41, 239.99 }, 
		{ 467.77, 401.00, 350.48, 328.20, 311.06, 293.92, 275.07, 261.35, 256.19, 242.48 }, 
		{ 484.77, 415.31, 375.19, 344.85, 314.50, 295.90, 291.97, 278.25, 273.35, 242.02 }, 
		{ 510.22, 428.78, 391.35, 353.92, 336.30, 318.68, 294.44, 285.62, 259.19, 263.57 }, 
		{ 579.17, 486.26, 416.56, 381.09, 359.06, 332.15, 322.36, 305.23, 275.86, 280.73 }, 
		{ 650.59, 553.76, 456.93, 411.19, 376.22, 362.76, 346.61, 325.07, 294.12, 291.42 }, 
		{ 721.49, 612.94, 524.91, 441.29, 413.40, 375.25, 354.70, 347.35, 313.59, 304.78 }, 
		{ 794.35, 673.58, 575.05, 476.51, 436.77, 409.74, 384.30, 371.58, 352.50, 327.06 }, 
		{ 869.16, 732.26, 633.00, 544.00, 482.38, 448.14, 413.90, 400.20, 376.23, 350.55 }, 
		{ 949.59, 799.25, 689.23, 595.72, 513.19, 483.85, 450.83, 428.82, 403.14, 388.46 }, 
		{ 1024.65, 864.28, 748.89, 655.01, 568.95, 525.91, 488.74, 459.39, 437.87, 412.44 }, 
		{ 1107.39, 934.93, 804.02, 702.19, 623.22, 558.79, 527.61, 496.43, 465.26, 452.78 }, 
		{ 1196.70, 1007.50, 868.90, 765.49, 677.48, 602.66, 567.45, 532.24, 505.83, 486.02 }, 
		{ 1278.74, 1083.78, 932.92, 823.83, 730.98, 659.02, 603.30, 570.80, 542.94, 512.76 }, 
		{ 1367.25, 1157.27, 1003.44, 878.91, 783.67, 707.97, 646.91, 615.16, 573.65, 551.67 }, 
		{ 1465.50, 1234.90, 1070.92, 945.37, 845.44, 766.00, 699.37, 650.67, 617.36, 586.61 }, 
		{ 1561.14, 1319.72, 1142.67, 1008.54, 901.24, 810.02, 745.63, 694.65, 659.77, 635.63 }, 
		{ 1659.03, 1401.20, 1210.63, 1067.71, 964.01, 865.91, 795.84, 734.17, 697.73, 669.70 }, 
		{ 1765.01, 1490.32, 1285.77, 1142.58, 1022.76, 929.24, 847.41, 788.95, 742.18, 704.19 } 
	},

};

//
// Time Taken
//
// [20] corresponds to various SOL MODELS
// [24] corresponds to Velocities from 5mph - 120mph
// [10] corresponds to Urgencies from 0.1 - 1.0

const double cTIME[20][24][10] = 
{
	/***** Audi - 1 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 32.00, 32.00, 31.00 }, 
		{ 26.00, 24.00, 22.00, 21.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00 }, 
		{ 19.00, 18.00, 16.00, 15.00, 15.00, 14.00, 13.00, 13.00, 13.00, 13.00 }, 
		{ 16.00, 14.00, 13.00, 12.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00 }, 
		{ 14.00, 12.00, 11.00, 10.00, 10.00, 9.70, 9.30, 9.00, 8.80, 8.70 }, 
		{ 12.00, 11.00, 9.60, 9.20, 8.80, 8.50, 8.20, 7.90, 7.60, 7.50 }, 
		{ 11.00, 9.30, 8.70, 8.10, 7.90, 7.60, 7.30, 7.10, 6.80, 6.70 }, 
		{ 9.50, 8.40, 7.70, 7.40, 7.00, 6.70, 6.50, 6.30, 6.00, 6.00 }, 
		{ 9.30, 8.10, 7.50, 7.00, 6.70, 6.40, 6.00, 5.90, 5.50, 5.30 }, 
		{ 9.30, 8.00, 7.30, 6.80, 6.30, 6.00, 5.80, 5.50, 5.20, 5.20 }, 
		{ 9.30, 8.10, 7.00, 6.40, 6.00, 5.80, 5.60, 5.40, 4.90, 4.90 }, 
		{ 9.40, 8.20, 7.20, 6.20, 5.90, 5.40, 5.20, 5.10, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.10, 5.70, 5.40, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.30, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.20, 7.30, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.60, 6.70, 6.10, 5.60, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.20, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.40, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** BMW_StationWagon - 19 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00 }, 
		{ 25.00, 23.00, 22.00, 21.00, 20.00, 19.00, 18.00, 17.00, 17.00, 17.00 }, 
		{ 19.00, 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00 }, 
		{ 15.00, 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 10.00 }, 
		{ 13.00, 12.00, 11.00, 10.00, 9.70, 9.40, 9.20, 9.00, 8.80, 8.50 }, 
		{ 11.00, 10.00, 9.60, 9.00, 8.80, 8.30, 7.90, 7.70, 7.60, 7.60 }, 
		{ 10.00, 9.00, 8.60, 8.10, 7.60, 7.40, 7.10, 6.90, 6.60, 6.60 }, 
		{ 9.30, 8.10, 7.70, 7.40, 7.00, 6.60, 6.30, 6.20, 5.90, 5.90 }, 
		{ 9.30, 8.10, 7.50, 7.10, 6.60, 6.40, 6.10, 5.90, 5.80, 5.60 }, 
		{ 9.30, 8.10, 7.10, 6.60, 6.30, 6.20, 5.50, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.10, 7.00, 6.40, 5.90, 5.80, 5.40, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.20, 6.20, 5.90, 5.40, 5.20, 5.20, 5.00, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.30, 5.90, 5.60, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.80, 4.70, 4.60 }, 
		{ 9.60, 8.30, 7.20, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.60, 6.00, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.00, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.90, 7.00, 6.40, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.50, 5.10, 4.90, 4.70 }, 
		{ 11.00, 9.20, 8.00, 7.10, 6.50, 5.90, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** DodgeNeon - 35 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 29.00, 29.00 }, 
		{ 23.00, 22.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00, 17.00, 16.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 9.80, 9.80 }, 
		{ 12.00, 11.00, 10.00, 9.80, 9.40, 9.10, 9.00, 8.60, 8.50, 8.30 }, 
		{ 11.00, 9.50, 9.10, 8.70, 8.30, 7.90, 7.60, 7.50, 7.40, 7.20 }, 
		{ 9.40, 8.70, 8.20, 7.80, 7.50, 7.10, 6.90, 6.70, 6.50, 6.30 }, 
		{ 9.30, 8.10, 7.70, 7.20, 7.00, 6.60, 6.30, 6.20, 6.20, 5.90 }, 
		{ 9.30, 8.00, 7.50, 6.90, 6.70, 6.40, 6.00, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.70, 6.20, 5.90, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.10, 7.00, 6.40, 5.90, 5.80, 5.40, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.10, 6.20, 5.90, 5.40, 5.30, 5.20, 4.70, 4.70 }, 
		{ 9.50, 8.20, 7.20, 6.30, 5.70, 5.50, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.60, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.70, 5.30, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.40, 6.70, 6.00, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.20, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.40, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.80, 5.40, 5.10, 4.90, 4.60 }, 
		{ 11.00, 9.20, 8.00, 7.20, 6.50, 5.90, 5.50, 5.10, 4.90, 4.70 } 
	},

	/***** Escape - 37 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 29.00, 29.00 }, 
		{ 23.00, 22.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00, 16.00, 16.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 13.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 9.80, 9.80 }, 
		{ 12.00, 11.00, 10.00, 9.80, 9.40, 9.10, 8.80, 8.60, 8.30, 8.30 }, 
		{ 11.00, 9.70, 9.10, 8.70, 8.30, 8.10, 7.60, 7.50, 7.40, 7.20 }, 
		{ 9.40, 8.70, 8.20, 7.80, 7.50, 7.10, 6.90, 6.70, 6.50, 6.30 }, 
		{ 9.20, 8.10, 7.70, 7.20, 7.00, 6.60, 6.30, 6.20, 5.90, 5.90 }, 
		{ 9.30, 8.10, 7.30, 6.90, 6.70, 6.40, 6.10, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.10, 7.10, 6.60, 6.30, 5.90, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.20, 7.00, 6.40, 5.90, 5.80, 5.40, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.20, 6.20, 5.90, 5.50, 5.20, 5.10, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.10, 5.70, 5.60, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.30, 5.60, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.30, 6.50, 5.70, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.30, 7.30, 6.50, 5.80, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.40, 6.60, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.60, 6.80, 6.10, 5.60, 5.20, 5.00, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.70 }, 
		{ 11.00, 9.20, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** FordTaurus - 38 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 29.00, 29.00 }, 
		{ 23.00, 22.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00, 16.00, 16.00 }, 
		{ 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 9.80, 9.70 }, 
		{ 12.00, 11.00, 10.00, 9.80, 9.40, 9.10, 9.00, 8.60, 8.30, 8.30 }, 
		{ 11.00, 9.50, 8.90, 8.70, 8.30, 7.90, 7.60, 7.50, 7.20, 7.20 }, 
		{ 9.40, 8.70, 8.00, 7.80, 7.50, 7.30, 6.80, 6.70, 6.50, 6.30 }, 
		{ 9.20, 8.30, 7.70, 7.20, 7.00, 6.80, 6.60, 6.20, 5.80, 5.70 }, 
		{ 9.30, 8.10, 7.50, 6.90, 6.70, 6.40, 6.10, 5.90, 5.80, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.60, 6.30, 5.90, 5.50, 5.30, 5.50, 5.20 }, 
		{ 9.30, 8.10, 7.00, 6.40, 6.00, 5.60, 5.60, 5.10, 4.90, 5.00 }, 
		{ 9.40, 8.10, 7.10, 6.20, 5.90, 5.70, 5.20, 5.00, 5.00, 4.70 }, 
		{ 9.40, 8.20, 7.10, 6.10, 5.80, 5.40, 5.20, 4.90, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.20, 6.40, 5.70, 5.30, 5.10, 4.80, 4.60, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.40, 6.60, 6.00, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.50, 7.50, 6.70, 6.00, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.70, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.90, 4.70 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** Towncar - 42 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 29.00, 29.00 }, 
		{ 23.00, 22.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00, 16.00, 16.00 }, 
		{ 17.00, 16.00, 15.00, 14.00, 13.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 9.80, 9.70 }, 
		{ 12.00, 11.00, 10.00, 9.80, 9.60, 9.10, 8.80, 8.60, 8.30, 8.20 }, 
		{ 11.00, 9.50, 8.90, 8.70, 8.30, 7.90, 7.60, 7.50, 7.20, 7.20 }, 
		{ 9.40, 8.50, 8.20, 7.60, 7.50, 7.10, 6.80, 6.70, 6.50, 6.30 }, 
		{ 9.20, 8.10, 7.70, 7.40, 6.80, 6.60, 6.60, 6.20, 6.10, 5.90 }, 
		{ 9.30, 8.00, 7.50, 6.90, 6.70, 6.10, 6.00, 5.90, 5.80, 5.20 }, 
		{ 9.20, 8.10, 7.10, 6.60, 6.20, 5.90, 5.50, 5.30, 5.40, 5.20 }, 
		{ 9.30, 8.10, 6.90, 6.40, 6.00, 5.80, 5.40, 5.10, 5.20, 4.90 }, 
		{ 9.30, 8.10, 7.00, 6.40, 6.00, 5.70, 5.20, 4.90, 5.00, 4.70 }, 
		{ 9.40, 8.10, 7.20, 6.10, 5.90, 5.50, 5.20, 4.90, 4.70, 4.60 }, 
		{ 9.50, 8.20, 7.10, 6.40, 5.60, 5.30, 5.10, 5.00, 4.80, 4.60 }, 
		{ 9.60, 8.20, 7.30, 6.40, 5.70, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.60, 8.30, 7.30, 6.50, 5.80, 5.30, 5.00, 4.90, 4.70, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.50, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.20, 5.60, 5.20, 5.00, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.90, 7.00, 6.40, 5.80, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.50, 5.10, 4.80, 4.70 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 5.90, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** Windstar - 43 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 29.00, 29.00 }, 
		{ 23.00, 22.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00, 16.00, 16.00 }, 
		{ 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 10.00, 9.70 }, 
		{ 12.00, 11.00, 10.00, 9.80, 9.40, 9.10, 8.80, 8.60, 8.50, 8.30 }, 
		{ 11.00, 9.50, 9.10, 8.70, 8.30, 7.90, 7.90, 7.50, 7.40, 7.20 }, 
		{ 9.40, 8.70, 8.20, 7.80, 7.50, 7.10, 6.90, 6.70, 6.50, 6.30 }, 
		{ 9.30, 8.10, 7.70, 7.20, 7.00, 6.60, 6.30, 6.20, 5.90, 5.90 }, 
		{ 9.30, 8.10, 7.50, 6.90, 6.70, 6.40, 6.10, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.10, 7.00, 6.60, 6.30, 6.00, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.30, 8.20, 7.00, 6.40, 5.90, 5.80, 5.30, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.20, 7.10, 6.20, 5.90, 5.50, 5.50, 5.20, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.30, 5.80, 5.40, 5.20, 5.10, 4.80, 4.60 }, 
		{ 9.60, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.20, 7.30, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.60, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.80, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.60, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.70, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.40, 5.80, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.80, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.10, 6.50, 5.90, 5.50, 5.10, 4.90, 4.70 } 
	},

	/***** Deville - 56 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 29.00, 29.00 }, 
		{ 23.00, 22.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00, 16.00, 16.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 13.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 9.80, 9.80 }, 
		{ 12.00, 11.00, 10.00, 9.80, 9.40, 9.10, 8.80, 8.60, 8.30, 8.30 }, 
		{ 11.00, 9.50, 9.10, 8.70, 8.30, 7.90, 7.80, 7.50, 7.40, 7.20 }, 
		{ 9.40, 8.70, 8.20, 7.80, 7.50, 7.10, 6.90, 6.70, 6.50, 6.30 }, 
		{ 9.30, 8.10, 7.70, 7.30, 7.00, 6.60, 6.30, 6.20, 6.20, 5.90 }, 
		{ 9.30, 8.10, 7.30, 6.90, 6.70, 6.40, 6.10, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.10, 7.30, 6.60, 6.30, 5.90, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.10, 7.00, 6.60, 5.90, 5.80, 5.40, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.20, 7.10, 6.20, 5.90, 5.40, 5.20, 5.20, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.30, 5.70, 5.40, 5.10, 5.00, 4.70, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.90, 8.50, 7.40, 6.70, 6.00, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.10, 7.90, 7.00, 6.40, 5.80, 5.40, 5.10, 4.80, 4.70 }, 
		{ 11.00, 9.20, 8.00, 7.20, 6.50, 5.90, 5.50, 5.10, 4.90, 4.70 } 
	},

	/***** PEUGEOT_306 - 67 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 29.00 }, 
		{ 24.00, 22.00, 21.00, 20.00, 19.00, 18.00, 17.00, 17.00, 17.00, 16.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 15.00, 13.00, 12.00, 12.00, 11.00, 11.00, 10.00, 10.00, 10.00, 9.90 }, 
		{ 12.00, 11.00, 10.00, 9.90, 9.60, 9.30, 9.00, 8.70, 8.40, 8.40 }, 
		{ 11.00, 9.70, 9.20, 8.70, 8.30, 8.10, 7.80, 7.60, 7.30, 7.30 }, 
		{ 9.70, 8.70, 8.20, 7.90, 7.40, 7.20, 7.00, 6.80, 6.50, 6.30 }, 
		{ 9.30, 8.30, 7.70, 7.20, 6.80, 6.60, 6.30, 6.20, 6.10, 5.90 }, 
		{ 9.30, 8.00, 7.20, 6.90, 6.60, 6.40, 6.00, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.80, 6.30, 6.20, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.30, 8.10, 7.00, 6.40, 6.00, 5.80, 5.60, 5.00, 5.00, 4.90 }, 
		{ 9.40, 8.10, 7.10, 6.40, 5.90, 5.50, 5.20, 4.90, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.20, 6.10, 5.70, 5.40, 5.20, 5.10, 4.70, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.30, 7.30, 6.50, 5.80, 5.40, 5.10, 4.80, 4.70, 4.50 }, 
		{ 9.70, 8.40, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.20, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.80, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.20, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** VW_passat - 69 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00 }, 
		{ 25.00, 23.00, 22.00, 20.00, 19.00, 19.00, 18.00, 17.00, 17.00, 17.00 }, 
		{ 19.00, 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 13.00 }, 
		{ 15.00, 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 11.00, 10.00, 10.00 }, 
		{ 13.00, 12.00, 11.00, 10.00, 9.80, 9.50, 9.30, 8.80, 8.70, 8.40 }, 
		{ 11.00, 10.00, 9.40, 8.90, 8.60, 8.40, 8.00, 7.80, 7.50, 7.50 }, 
		{ 10.00, 8.90, 8.40, 8.10, 7.70, 7.20, 7.20, 6.80, 6.70, 6.50 }, 
		{ 9.30, 8.10, 7.70, 7.20, 7.00, 6.60, 6.40, 6.20, 5.90, 5.90 }, 
		{ 9.30, 8.10, 7.30, 6.90, 6.70, 6.40, 6.10, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.70, 6.20, 5.90, 5.80, 5.60, 5.10, 5.20 }, 
		{ 9.40, 8.10, 7.00, 6.40, 6.20, 5.80, 5.60, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.10, 6.20, 5.90, 5.50, 5.20, 5.20, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.20, 6.10, 5.80, 5.40, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.60, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.80, 4.80, 4.60 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.80, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.60, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.80, 6.10, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.20, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.00, 8.00, 7.10, 6.40, 5.90, 5.40, 5.10, 4.90, 4.60 }, 
		{ 11.00, 9.20, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** LandRover - 71 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 31.00, 30.00 }, 
		{ 25.00, 23.00, 21.00, 20.00, 19.00, 18.00, 18.00, 17.00, 17.00, 17.00 }, 
		{ 19.00, 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00 }, 
		{ 15.00, 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 11.00, 10.00, 10.00 }, 
		{ 13.00, 12.00, 11.00, 10.00, 9.80, 9.40, 9.10, 8.90, 8.70, 8.40 }, 
		{ 11.00, 10.00, 9.40, 8.90, 8.60, 8.20, 8.10, 7.70, 7.60, 7.30 }, 
		{ 10.00, 8.80, 8.40, 8.10, 7.70, 7.30, 7.00, 6.80, 6.50, 6.60 }, 
		{ 9.20, 8.20, 7.70, 7.40, 7.00, 6.60, 6.30, 6.20, 5.90, 5.90 }, 
		{ 9.30, 8.10, 7.30, 7.10, 6.70, 6.40, 6.10, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.10, 7.10, 6.60, 6.30, 5.90, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.10, 7.00, 6.60, 5.90, 5.80, 5.60, 5.40, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.20, 6.20, 5.90, 5.50, 5.20, 4.90, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.20, 6.10, 5.80, 5.50, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.30, 7.30, 6.50, 5.70, 5.30, 5.10, 4.80, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.80, 4.60, 4.50 }, 
		{ 9.90, 8.50, 7.40, 6.70, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 5.90, 5.50, 5.10, 4.90, 4.70 } 
	},

	/***** Ambulance - 72 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 29.00, 27.00, 25.00, 23.00, 22.00, 21.00, 20.00, 19.00, 19.00, 18.00 }, 
		{ 22.00, 20.00, 18.00, 17.00, 16.00, 15.00, 15.00, 14.00, 13.00, 13.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 13.00, 12.00, 12.00, 11.00, 11.00, 11.00 }, 
		{ 15.00, 14.00, 12.00, 11.00, 11.00, 10.00, 9.90, 9.50, 9.40, 9.10 }, 
		{ 13.00, 12.00, 11.00, 9.80, 9.40, 8.90, 8.70, 8.30, 8.10, 7.90 }, 
		{ 12.00, 11.00, 9.50, 8.70, 8.30, 8.10, 7.60, 7.50, 7.10, 7.10 }, 
		{ 11.00, 9.50, 8.40, 8.00, 7.50, 7.30, 6.90, 6.60, 6.50, 6.20 }, 
		{ 9.90, 8.60, 7.50, 7.20, 6.70, 6.60, 6.20, 6.00, 5.90, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.60, 6.30, 5.90, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.30, 8.10, 7.00, 6.40, 6.00, 5.80, 5.40, 5.40, 5.00, 4.90 }, 
		{ 9.40, 8.10, 7.10, 6.20, 5.90, 5.50, 5.20, 5.10, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.10, 5.70, 5.40, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.70, 5.30, 5.10, 4.80, 4.70, 4.50 }, 
		{ 9.70, 8.40, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.50, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.30, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.70 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** Police - 84 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00 }, 
		{ 26.00, 24.00, 23.00, 21.00, 20.00, 19.00, 19.00, 18.00, 17.00, 17.00 }, 
		{ 20.00, 18.00, 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00 }, 
		{ 16.00, 15.00, 13.00, 12.00, 12.00, 11.00, 11.00, 11.00, 11.00, 10.00 }, 
		{ 14.00, 12.00, 11.00, 10.00, 10.00, 9.70, 9.50, 9.20, 8.80, 8.70 }, 
		{ 12.00, 11.00, 9.70, 9.20, 8.90, 8.60, 8.20, 7.90, 7.80, 7.50 }, 
		{ 11.00, 9.50, 8.80, 8.20, 7.90, 7.60, 7.30, 7.10, 7.00, 6.70 }, 
		{ 9.70, 8.50, 7.80, 7.50, 7.00, 6.70, 6.40, 6.20, 6.20, 5.90 }, 
		{ 9.30, 8.10, 7.30, 6.90, 6.70, 6.40, 6.10, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.60, 6.30, 5.90, 5.80, 5.60, 5.50, 5.20 }, 
		{ 9.30, 8.00, 7.00, 6.40, 6.20, 5.80, 5.40, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.10, 6.30, 5.90, 5.70, 5.20, 5.20, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.20, 6.30, 5.70, 5.50, 5.20, 4.90, 4.80, 4.60 }, 
		{ 9.60, 8.20, 7.20, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.20, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.60, 5.80, 5.30, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.20, 8.00, 7.20, 6.50, 5.90, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** Freightliner_Semi - 101 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 31.00, 30.00, 28.00, 27.00 }, 
		{ 0.00, 32.00, 30.00, 27.00, 26.00, 24.00, 23.00, 21.00, 20.00, 20.00 }, 
		{ 29.00, 26.00, 24.00, 22.00, 20.00, 19.00, 18.00, 17.00, 16.00, 15.00 }, 
		{ 25.00, 22.00, 20.00, 18.00, 17.00, 16.00, 15.00, 14.00, 13.00, 13.00 }, 
		{ 22.00, 19.00, 17.00, 16.00, 15.00, 14.00, 13.00, 12.00, 11.00, 11.00 }, 
		{ 20.00, 17.00, 15.00, 14.00, 13.00, 12.00, 11.00, 10.00, 9.90, 9.30 }, 
		{ 18.00, 15.00, 14.00, 13.00, 12.00, 11.00, 9.90, 9.30, 8.70, 8.10 }, 
		{ 16.00, 14.00, 13.00, 11.00, 10.00, 9.70, 9.00, 8.30, 7.80, 7.40 }, 
		{ 15.00, 13.00, 12.00, 10.00, 9.50, 8.80, 8.10, 7.50, 7.00, 6.60 }, 
		{ 14.00, 12.00, 11.00, 9.70, 8.80, 8.10, 7.40, 6.80, 6.40, 6.10 }, 
		{ 13.00, 11.00, 10.00, 9.00, 8.10, 7.50, 6.80, 6.30, 5.90, 5.80 }, 
		{ 12.00, 11.00, 9.40, 8.40, 7.70, 6.90, 6.40, 5.80, 5.60, 5.50 }, 
		{ 12.00, 10.00, 8.90, 8.00, 7.20, 6.50, 5.90, 5.60, 5.40, 5.10 }, 
		{ 11.00, 9.60, 8.40, 7.60, 6.80, 6.20, 5.70, 5.40, 5.10, 4.90 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 5.90, 5.50, 5.10, 5.00, 4.70 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.60, 5.30, 5.00, 4.80, 4.60 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.80, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 5.90, 5.50, 5.10, 4.90, 4.70 } 
	},

	/***** ChevyBlazer - 2 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00 }, 
		{ 25.00, 23.00, 22.00, 21.00, 20.00, 19.00, 18.00, 17.00, 17.00, 17.00 }, 
		{ 19.00, 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00 }, 
		{ 15.00, 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 10.00 }, 
		{ 13.00, 12.00, 11.00, 10.00, 9.80, 9.40, 9.20, 9.00, 8.80, 8.50 }, 
		{ 11.00, 10.00, 9.40, 9.10, 8.60, 8.30, 8.00, 7.80, 7.60, 7.40 }, 
		{ 10.00, 9.00, 8.60, 8.10, 7.80, 7.40, 7.10, 6.90, 6.80, 6.60 }, 
		{ 9.30, 8.10, 7.70, 7.20, 7.00, 6.60, 6.30, 6.20, 5.90, 5.90 }, 
		{ 9.30, 8.10, 7.50, 7.10, 6.60, 6.40, 6.10, 5.90, 5.60, 5.60 }, 
		{ 9.30, 8.10, 7.10, 6.70, 6.30, 5.90, 5.70, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.10, 7.00, 6.40, 6.20, 5.60, 5.40, 5.30, 4.90, 4.90 }, 
		{ 9.40, 8.20, 7.10, 6.20, 6.00, 5.50, 5.20, 5.20, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.10, 5.70, 5.40, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.60, 6.00, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.50, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.20, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.70, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.80, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.10, 6.50, 5.90, 5.50, 5.10, 4.90, 4.70 } 
	},

	/***** CementTruck - 18 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 30.00, 28.00, 26.00, 24.00, 23.00, 22.00, 21.00, 20.00, 19.00, 19.00 }, 
		{ 23.00, 21.00, 19.00, 18.00, 17.00, 16.00, 15.00, 14.00, 14.00, 13.00 }, 
		{ 19.00, 17.00, 15.00, 14.00, 13.00, 13.00, 12.00, 12.00, 11.00, 11.00 }, 
		{ 16.00, 14.00, 13.00, 12.00, 11.00, 10.00, 10.00, 9.80, 9.50, 9.30 }, 
		{ 14.00, 12.00, 11.00, 10.00, 9.60, 9.10, 8.80, 8.60, 8.30, 8.20 }, 
		{ 12.00, 11.00, 9.90, 8.90, 8.50, 8.20, 7.90, 7.60, 7.40, 7.20 }, 
		{ 11.00, 9.90, 8.90, 8.10, 7.60, 7.40, 7.00, 6.90, 6.70, 6.40 }, 
		{ 10.00, 9.00, 8.00, 7.50, 7.10, 6.60, 6.50, 6.20, 6.00, 5.70 }, 
		{ 9.50, 8.20, 7.10, 6.80, 6.40, 6.10, 5.60, 5.70, 5.30, 5.30 }, 
		{ 9.40, 8.10, 7.00, 6.40, 6.20, 5.80, 5.30, 5.40, 5.00, 4.90 }, 
		{ 9.40, 8.10, 7.20, 6.20, 5.90, 5.50, 5.20, 5.10, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.10, 5.70, 5.40, 5.10, 5.00, 4.80, 4.60 }, 
		{ 9.60, 8.20, 7.20, 6.30, 5.80, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.70, 5.40, 5.10, 4.80, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.40, 6.70, 6.00, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.20, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.90, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** DumpTruck - 36 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 29.00, 27.00, 25.00, 24.00, 22.00, 21.00, 20.00, 20.00, 19.00, 18.00 }, 
		{ 22.00, 20.00, 19.00, 17.00, 16.00, 15.00, 15.00, 14.00, 14.00, 13.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 13.00, 12.00, 12.00, 11.00, 11.00, 11.00 }, 
		{ 15.00, 14.00, 13.00, 12.00, 11.00, 10.00, 9.90, 9.70, 9.40, 9.20 }, 
		{ 14.00, 12.00, 11.00, 10.00, 9.40, 9.10, 8.60, 8.50, 8.20, 7.90 }, 
		{ 12.00, 11.00, 9.60, 8.70, 8.40, 8.00, 7.80, 7.50, 7.30, 7.00 }, 
		{ 11.00, 9.60, 8.50, 7.90, 7.40, 7.30, 7.10, 6.60, 6.40, 6.40 }, 
		{ 10.00, 8.70, 7.80, 7.30, 6.90, 6.60, 6.10, 6.20, 5.80, 5.50 }, 
		{ 9.30, 8.00, 7.10, 6.70, 6.30, 5.90, 5.80, 5.60, 5.50, 5.20 }, 
		{ 9.40, 8.10, 7.00, 6.40, 6.20, 5.90, 5.30, 5.10, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.10, 6.20, 5.90, 5.50, 5.20, 4.90, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.20, 6.10, 5.70, 5.50, 5.10, 4.90, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.20, 7.30, 6.50, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.60, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.10, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 6.00, 5.50, 5.10, 4.90, 4.70 } 
	},

	/***** GarbageTruck - 39 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00 }, 
		{ 29.00, 27.00, 25.00, 23.00, 22.00, 21.00, 20.00, 19.00, 19.00, 18.00 }, 
		{ 22.00, 20.00, 18.00, 17.00, 16.00, 15.00, 15.00, 14.00, 13.00, 13.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 13.00, 12.00, 12.00, 11.00, 11.00, 11.00 }, 
		{ 15.00, 14.00, 12.00, 12.00, 11.00, 10.00, 9.90, 9.70, 9.40, 9.00 }, 
		{ 13.00, 12.00, 11.00, 9.80, 9.40, 8.90, 8.60, 8.30, 8.10, 7.90 }, 
		{ 12.00, 11.00, 9.50, 8.70, 8.30, 8.00, 7.60, 7.50, 7.10, 7.10 }, 
		{ 11.00, 9.50, 8.30, 7.90, 7.50, 7.10, 6.90, 6.60, 6.50, 6.10 }, 
		{ 9.80, 8.60, 7.80, 7.30, 6.70, 6.60, 6.20, 6.00, 5.90, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.70, 6.30, 5.90, 5.60, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.20, 7.00, 6.60, 6.00, 5.80, 5.40, 5.40, 4.90, 4.90 }, 
		{ 9.40, 8.10, 7.10, 6.20, 5.90, 5.50, 5.20, 5.20, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.10, 6.10, 5.80, 5.40, 5.20, 4.90, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.40, 7.30, 6.50, 5.80, 5.30, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.40, 5.10, 4.90, 4.60, 4.60 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.50, 7.50, 6.70, 6.10, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.80, 5.50, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** MailTruck - 40 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 33.00, 32.00, 31.00, 30.00, 30.00, 29.00 }, 
		{ 23.00, 22.00, 21.00, 19.00, 19.00, 18.00, 17.00, 17.00, 16.00, 16.00 }, 
		{ 18.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00, 12.00, 12.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 10.00, 10.00, 10.00, 9.70 }, 
		{ 12.00, 11.00, 10.00, 9.80, 9.50, 9.10, 8.90, 8.70, 8.40, 8.20 }, 
		{ 11.00, 9.70, 9.10, 8.60, 8.30, 8.10, 7.80, 7.60, 7.30, 7.10 }, 
		{ 9.50, 8.70, 8.20, 7.80, 7.40, 7.20, 7.00, 6.90, 6.60, 6.40 }, 
		{ 9.30, 8.10, 7.70, 7.20, 7.00, 6.60, 6.30, 6.10, 5.80, 5.90 }, 
		{ 9.30, 8.10, 7.50, 6.90, 6.40, 6.40, 6.00, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.10, 7.10, 6.60, 6.30, 5.90, 5.80, 5.50, 5.20, 5.20 }, 
		{ 9.40, 8.20, 7.00, 6.60, 6.20, 5.80, 5.30, 5.30, 5.20, 4.90 }, 
		{ 9.40, 8.20, 7.20, 6.20, 5.90, 5.70, 5.50, 5.20, 4.70, 4.70 }, 
		{ 9.50, 8.10, 7.20, 6.20, 5.70, 5.40, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 4.90, 4.70, 4.60 }, 
		{ 9.60, 8.30, 7.30, 6.50, 5.70, 5.30, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.60, 5.90, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.60, 6.00, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 4.90, 4.80, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.60 }, 
		{ 11.00, 9.10, 8.00, 7.10, 6.50, 5.90, 5.50, 5.20, 4.90, 4.70 } 
	},

	/***** PhoneTruck - 41 *****/
	{
		{ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 33.00, 32.00 }, 
		{ 27.00, 25.00, 23.00, 22.00, 21.00, 20.00, 19.00, 18.00, 18.00, 17.00 }, 
		{ 20.00, 19.00, 17.00, 16.00, 15.00, 14.00, 14.00, 13.00, 13.00, 13.00 }, 
		{ 17.00, 15.00, 14.00, 13.00, 12.00, 11.00, 11.00, 11.00, 11.00, 10.00 }, 
		{ 14.00, 13.00, 12.00, 11.00, 10.00, 9.90, 9.50, 9.30, 9.10, 8.80 }, 
		{ 12.00, 11.00, 10.00, 9.40, 9.00, 8.70, 8.30, 8.00, 7.80, 7.70 }, 
		{ 11.00, 9.80, 8.80, 8.40, 8.00, 7.70, 7.30, 7.10, 7.00, 6.70 }, 
		{ 10.00, 8.80, 8.10, 7.60, 7.10, 6.80, 6.70, 6.50, 6.40, 5.90 }, 
		{ 9.30, 8.10, 7.50, 6.90, 6.70, 6.40, 6.00, 5.90, 5.50, 5.60 }, 
		{ 9.30, 8.00, 7.10, 6.60, 6.30, 5.90, 5.80, 5.60, 5.20, 5.20 }, 
		{ 9.40, 8.20, 7.00, 6.40, 6.00, 5.80, 5.60, 5.30, 5.00, 4.90 }, 
		{ 9.40, 8.20, 7.20, 6.20, 5.90, 5.50, 5.20, 5.10, 4.80, 4.70 }, 
		{ 9.50, 8.20, 7.20, 6.10, 5.70, 5.40, 5.20, 5.00, 4.80, 4.60 }, 
		{ 9.50, 8.20, 7.20, 6.40, 5.80, 5.40, 5.10, 5.00, 4.70, 4.50 }, 
		{ 9.60, 8.30, 7.30, 6.40, 5.70, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.70, 8.30, 7.30, 6.50, 5.80, 5.40, 5.10, 4.90, 4.70, 4.50 }, 
		{ 9.80, 8.40, 7.40, 6.50, 5.90, 5.40, 5.10, 4.90, 4.60, 4.50 }, 
		{ 9.90, 8.50, 7.50, 6.70, 6.00, 5.40, 5.20, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.60, 7.50, 6.70, 6.00, 5.50, 5.10, 4.90, 4.70, 4.50 }, 
		{ 10.00, 8.70, 7.60, 6.80, 6.10, 5.60, 5.20, 5.00, 4.70, 4.50 }, 
		{ 10.00, 8.80, 7.70, 6.90, 6.30, 5.70, 5.30, 5.00, 4.80, 4.60 }, 
		{ 10.00, 8.90, 7.80, 7.00, 6.30, 5.80, 5.40, 5.00, 4.80, 4.70 }, 
		{ 11.00, 9.00, 7.90, 7.10, 6.40, 5.90, 5.40, 5.10, 4.80, 4.70 }, 
		{ 11.00, 9.20, 8.00, 7.20, 6.50, 6.00, 5.50, 5.20, 4.90, 4.70 } 
	},

};

//////////////////////////////////////////////////////////////////////////////
//
// Description: Given velocity and urgency, this function queries and 
//				interpolates time and distance taken to execute a lanchange
// Remarks:
//
// Arguments:
//   velocity	- velocity in 'mph' ranging from 5.0 - 120.0 mph
//   urgency	- urgency ranging from 0.1 - 1.0
//   solId		- SolId of vehicle
//   longDist	- (output) The distance travelled to complete the lane
//				   change (in feet).
//   time		- (output) Time taken to complete lanechange  
//				  (in seconds).
//
// Returns: A boolean to indicate if distance and time were found.
//
//////////////////////////////////////////////////////////////////////////////
bool
LcLookupDistTime(
			double velocity, 
			double urgency, 
			int solId, 
			double& longDist, 
			double& time 
			)
{
	// Adding  solid to map
	solIdToIndexMap[1] = 0;
	solIdToIndexMap[19] = 1;
	solIdToIndexMap[35] = 2;
	solIdToIndexMap[37] = 3;
	solIdToIndexMap[38] = 4;
	solIdToIndexMap[42] = 5;
	solIdToIndexMap[43] = 6;
	solIdToIndexMap[56] = 7;
	solIdToIndexMap[67] = 8;
	solIdToIndexMap[69] = 9;
	solIdToIndexMap[71] = 10;
	solIdToIndexMap[72] = 11;
	solIdToIndexMap[84] = 12;
	solIdToIndexMap[101] = 13;
	solIdToIndexMap[2] = 14;
	solIdToIndexMap[18] = 15;
	solIdToIndexMap[36] = 16;
	solIdToIndexMap[39] = 17;
	solIdToIndexMap[40] = 18;
	solIdToIndexMap[41] = 19;

    auto itr = solIdToIndexMap.find(solId);
    if (itr != solIdToIndexMap.end()){
        solIdIndex = itr->second; 
    }else{
        solIdIndex = solIdToIndexMap.begin()->second;
    }
	//// Getting the position of the particluar SolModel in the array 
	//solIdIndex = solIdToIndexMap[solId]; 

	// Testing the input velocity
	bool velLimits = (velocity >= 5.0 && velocity <= 120.0);
	// Testing the input urgency
	bool urgLimits = (urgency >= 0.1 && urgency <= 1.0);
	// Both velLimits and urgLimits have to be satified
	bool withinLimits = (velLimits && urgLimits); 

	if (withinLimits)
	{
		// 
		// velocity is a multiple of 5
		//
		if ( int(velocity)%5 == 0 )
		{
			int V1 = int(velocity/5 - 1); 
			double Urg = (urgency * 10);
			longDist = cLONGDIST[solIdIndex][V1][int(Urg - 1)];
			time = cTIME[solIdIndex][V1][int(Urg - 1)];
		}
		//
		// velocity is NOT a multiple of 5 
		// example:23, 57,74 etc
		//
		else {
			int V1 = int((velocity)/5 -1);
			int V2 = V1 + 1;
			double Urg = (urgency * 10);
			double diffDist = cLONGDIST[solIdIndex][V2][int(Urg - 1)] - cLONGDIST[solIdIndex][V1][int(Urg - 1)];
			double diffTime = cTIME[solIdIndex][V2][int(Urg - 1)] - cTIME[solIdIndex][V1][int(Urg - 1)];
		//
		// Longitudinal Distance
		//
		longDist = cLONGDIST[solIdIndex][V1][int(Urg - 1)] 
			+ ( diffDist * (velocity - (double(V1) * 5.0 + 5.0) ) 
			/ ((double(V2) * 5.0 + 5.0) - (double(V1) * 5.0 + 5.0)) ); 

		//
		// Time
		//
		time = cTIME[solIdIndex][V1][int(Urg - 1)]
			+ ( diffTime * (velocity - (double(V1) * 5.0 + 5.0) ) 
			/ ((double(V2) * 5.0 + 5.0) - (double(V1) * 5.0 + 5.0)) ); 

#ifdef DEBUG_CALC
		gout << V1 << "," << int(Urg - 1) << endl;
		gout << V2 << "," << int(Urg - 1) << endl << endl;
		gout << cLONGDIST[solIdIndex][V2][int(Urg - 1)] << " - ";
		gout << cLONGDIST[solIdIndex][V1][int(Urg - 1)] << " = " << diffDist << endl;
		gout << "Vel-1 " << (double(V1) * 5.0 + 5.0) << endl;
		gout << "Vel-2 " << (double(V2) * 5.0 + 5.0) << endl;
		gout << "Diff: " << ((double(V2) * 5.0 + 5.0) - (double(V1) * 5.0 + 5.0));
		gout << endl << endl; 

		gout << cTIME[solIdIndex][V2][int(Urg - 1)] << " - ";
		gout << cTIME[solIdIndex][V1][int(Urg - 1)] << " = " << diffTime << endl;
		gout << "Vel-1 " << (double(V1) * 5.0 + 5.0) << endl;
		gout << "Vel-2 " << (double(V2) * 5.0 + 5.0) << endl;
		gout << "Diff: " << ((double(V2) * 5.0 + 5.0) - (double(V1) * 5.0 + 5.0)) << endl;
		gout << "Long Dist: " << longDist << "ft"<< endl;
		gout << "Time: "<< time << "seconds" << endl;
#endif //DEBUG_CALC

			}
	}
	else {
		withinLimits = false;
	}
	return withinLimits;
} // End of LcLookupDistTime() 

//////////////////////////////////////////////////////////////////////////////
//
// Description: This function when distance and solId are given queries the data 
//				tables and returns the velocity and urgency with which the 
//				desired distance can be achieved. If the desired distance 
//				is not exactly matched, it will give the velocity of that 
//				distance that is closest to the input distance.  
// Remarks:
//
// Arguments:
//   dist		- distance travelled to execute a lanechange (in feet)
//   urgency	- urgency ranging from 0.1 - 1.0
//   solId		- SolId of vehicle
//   velocity	- (output) The velocity needed to complete the lane
//    			  change in given distance (in mph).
//
// Returns: A boolean to indicate if velocity found.
//
//////////////////////////////////////////////////////////////////////////////
bool 
LcLookupVelocityfromDist(
				double dist,
				double urgency,
				int solId, 
				double& velocity 
				)
{
	// 
	// Checking inputs 
	// 
	bool withinLimits = (dist >= 0.0 && urgency >= 0.1 && urgency <= 1.0);
	bool matchFound = false;
	if (withinLimits) 
	{ 
	solIdToIndexMap[1] = 0;
	solIdToIndexMap[19] = 1;
	solIdToIndexMap[35] = 2;
	solIdToIndexMap[37] = 3;
	solIdToIndexMap[38] = 4;
	solIdToIndexMap[42] = 5;
	solIdToIndexMap[43] = 6;
	solIdToIndexMap[56] = 7;
	solIdToIndexMap[67] = 8;
	solIdToIndexMap[69] = 9;
	solIdToIndexMap[71] = 10;
	solIdToIndexMap[72] = 11;
	solIdToIndexMap[84] = 12;
	solIdToIndexMap[101] = 13;
	solIdToIndexMap[2] = 14;
	solIdToIndexMap[18] = 15;
	solIdToIndexMap[36] = 16;
	solIdToIndexMap[39] = 17;
	solIdToIndexMap[40] = 18;
	solIdToIndexMap[41] = 19;


		// Getting the position of the particluar SolModel in the array 
		//solIdIndex = solIdToIndexMap[solId]; 

    auto itr = solIdToIndexMap.find(solId);
    if (itr != solIdToIndexMap.end()){
        solIdIndex = itr->second; 
    }else{
        solIdIndex = solIdToIndexMap.begin()->second;
    }
		// Coverting the urgency into a position in the array
		int urgCounter = int(urgency*10) - 1; 

		for (int velCounter = 23 ; velCounter >= 0; velCounter--) 
		{ 
			// 
			// Exact Match with the dist in the Array
			// 
			bool exactMatch = ((dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) > -0.05 &&
				(dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) < 0.00); 

			// 
			// Need a velocity that makes LC in less distance than actual dist to intrscn 
			// 5ft less in this case 
			// 
			bool matchTier1 = ((dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) > 0.00 && 
				(dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) < 5.00); 
			// 
			// 10ft less in this case 
			// 
			bool matchTier2 = ((dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) > 5.00 && 
				(dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) < 15.00); 

			if (exactMatch) 
			{ 
				velocity = double(velCounter + 1) * 5.0f; 
#ifdef DEBUG_SEARCH_VEL 
				gout << endl << "Dist-exactMatch---velocity: " << velocity << "  velCounter: ";  
				gout << velCounter << "   UrgCounter: "; 
				gout << urgCounter << endl <<  endl; 
#endif 
				matchFound = exactMatch;
				break; 
			} 
			else if (matchTier1) 
			{ 
				velocity = double(velCounter + 1) * 5.0f; 
#ifdef DEBUG_SEARCH_VEL 
				gout << "Dist-matchTier1---velocity: " << velocity << "  velCounter: "; 
				gout << velCounter << "   UrgCounter: "; 
				gout << urgCounter << endl <<  endl; 
#endif 
				matchFound = matchTier1;
				break; 
			} 
			else if (matchTier2) 
			{ 
				velocity = double(velCounter + 1) * 5.0f; 
#ifdef DEBUG_SEARCH_VEL 
				gout << "Dist-matchTier2---velocity: " << velocity << "  velCounter:";  
				gout << velCounter << "   UrgCounter: "; 
				gout << urgCounter << endl <<  endl; 
#endif 
				matchFound = matchTier2;
				break; 
			} 
		} 
	}  
	return matchFound; 
} // End of LcLookupVelocityfromDist() 

//////////////////////////////////////////////////////////////////////////// 
//
// Description: Overloaded function with extra parameter as the 
//				reference to a vector having list of matched 
//				velocities. When dist, solId  are given,
//				this function returns the velocity with 
//				which lane change can be achieved in the.  
//				desired distance.
// Remarks:
//
// Arguments:
//   dist		- distance travelled to execute a lanechange (in feet)
//   solId		- SolId of vehicle
//   velocity	- (output) Matched velocities needed to complete the lane
//    			  change in given distance are stored in this vector (in mph).
//
// Returns: A boolean to indicate if velocity found.
//
//////////////////////////////////////////////////////////////////////////////
bool  
LcLookupVelocityfromDist( 
				double dist,  
				int solId,  
				vector<vector<double> >& v 
				) 
{ 
	// 
	// Checking inputs 
	// 
	bool withinLimits = (dist >= 0.0); 
	bool matchFound = false; 
	if(withinLimits) 
	{ 
		// Adding  solid to map 
	solIdToIndexMap[1] = 0;
	solIdToIndexMap[19] = 1;
	solIdToIndexMap[35] = 2;
	solIdToIndexMap[37] = 3;
	solIdToIndexMap[38] = 4;
	solIdToIndexMap[42] = 5;
	solIdToIndexMap[43] = 6;
	solIdToIndexMap[56] = 7;
	solIdToIndexMap[67] = 8;
	solIdToIndexMap[69] = 9;
	solIdToIndexMap[71] = 10;
	solIdToIndexMap[72] = 11;
	solIdToIndexMap[84] = 12;
	solIdToIndexMap[101] = 13;
	solIdToIndexMap[2] = 14;
	solIdToIndexMap[18] = 15;
	solIdToIndexMap[36] = 16;
	solIdToIndexMap[39] = 17;
	solIdToIndexMap[40] = 18;
	solIdToIndexMap[41] = 19;


		// Getting the position of the particluar SolModel in the array 
		//solIdIndex = solIdToIndexMap[solId];  

    auto itr = solIdToIndexMap.find(solId);
    if (itr != solIdToIndexMap.end()){
        solIdIndex = itr->second; 
    }else{
        solIdIndex = solIdToIndexMap.begin()->second;
    }		 
		// 
		// Vector that holds the matching vel-urg pair 
		// 
		vector<double> matchPair; 

		for (int velCounter = 23 ; velCounter >= 0; velCounter--) 
		{ 
			for (int urgCounter = 9; urgCounter >= 0; urgCounter--) 
			{ 
				// 
				// Exact Match with the dist in the Array 
				// 
				bool exactMatch = ((dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) > -0.01 && 
					(dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) <= 0.00); 

				// 
				// Need a velocity that makes LC in less distance than actual dist to intrscn 
				// 5ft less in this case 
				// 
				bool matchTier1 = ((dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) > 0.00 && 
					(dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) < 5.00); 
				// 
				// 10ft less in this case 
				// 
				bool matchTier2 = ((dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) > 1.00 && 
					(dist - cLONGDIST[solIdIndex][velCounter][urgCounter]) < 15.00); 

				if (exactMatch) 
				{ 
					// 
					// Pushing the velocity and urgency into the vector matchPair 
					// 
					matchPair.push_back(double(velCounter + 1) * 5.0f); 
					matchPair.push_back(double(urgCounter + 1) / 10.0f); 

					// Pushing this pair vector into the main vector 
					v.push_back(matchPair); 

					// Clearing the vector 
					matchPair.clear(); 
#ifdef DEBUG_SEARCH_VEL 
					gout << "Dist-ExactMatch  ";  
					gout << "vel: " << double(velCounter + 1) * 5.0f << " urg: "; 
					gout << double(urgCounter + 1) / 10.0f; 
					gout << "   Vector: " << matchPair[0] << "|" << matchPair[1] << endl; 
#endif 
					matchFound = exactMatch; 
					exactMatch = false; 
				} 
				else if(matchTier1) 
				{ 
					matchPair.push_back(double(velCounter + 1) * 5.0f); 
					matchPair.push_back(double(urgCounter + 1) / 10.0f); 

					// Pushing this pair vector into the main vector 
					v.push_back(matchPair); 

					// Clearing the vector 
					matchPair.clear(); 
#ifdef DEBUG_SEARCH_VEL 
					gout << "Dist-matchTier1  "; 
					gout << "vel: " << double(velCounter + 1) * 5.0f << " urg: "; 
					gout << double(urgCounter + 1) / 10.0f; 
					gout << "   Vector: " << matchPair[0] << "|" << matchPair[1] << endl; 
#endif 
					matchFound = matchTier1; 
					matchTier1 = false; 
				} 
				else if (matchTier2) 
				{ 
					matchPair.push_back(double(velCounter + 1) * 5.0f); 
					matchPair.push_back(double(urgCounter + 1) / 10.0f); 

					// Pushing this pair vector into the main vector 
					v.push_back(matchPair); 

					// Clearing the vector 
					matchPair.clear(); 
#ifdef DEBUG_SEARCH_VEL 
					gout << "Dist-matchTier2  "; 
					gout << "vel: " << double(velCounter + 1) * 5.0f << " urg: "; 
					gout << double(urgCounter + 1) / 10.0f; 
					gout << "   Vector: " << matchPair[0] << "|" << matchPair[1] << endl; 
#endif 
					matchFound = matchTier2; 
					matchTier2 = false; 
				} 
			} 
		} 
	} 
	else { 
		matchFound = false;
	} 
	return matchFound; 
} // End of LcLookupVelocityfromDist() 

/////////////////////////////////////////////////////////////////////////////// 
//
// Description: This function when time, urgency and solId are 
//				given, queries the data tables, interpolates 
//				and returns the velocity to needed to complete the
//				lanechange in the desired time
//				If the desired time is not exactly matched,it 
//				will give the velocity of that time that is closest 
//				to the input time 
// Remarks:
//
// Arguments:
//   time		- time taken to execute a lanechange (in seconds)
//   urgency	- urgency ranging from 0.1 - 1.0
//   solId		- SolId of vehicle
//   velocity	- (output) Matched velocity needed to complete the lane
//    			  change in given time(in mph).
//
// Returns: A boolean to indicate if velocity found.
//
//////////////////////////////////////////////////////////////////////////////
bool  
LcLookupVelocityfromTime( 
				double time,  
				double urgency, 
				int solId,  
				double& velocity 
				) 
{ 
	// 
	// Checking inputs 
	// 
	bool withinLimits = (time >= 0.0 && urgency >= 0.1 && urgency <= 1.0); 

	bool matchFound = false;
	if(withinLimits) 
	{ 
		// Adding  solid to map 
	solIdToIndexMap[1] = 0;
	solIdToIndexMap[19] = 1;
	solIdToIndexMap[35] = 2;
	solIdToIndexMap[37] = 3;
	solIdToIndexMap[38] = 4;
	solIdToIndexMap[42] = 5;
	solIdToIndexMap[43] = 6;
	solIdToIndexMap[56] = 7;
	solIdToIndexMap[67] = 8;
	solIdToIndexMap[69] = 9;
	solIdToIndexMap[71] = 10;
	solIdToIndexMap[72] = 11;
	solIdToIndexMap[84] = 12;
	solIdToIndexMap[101] = 13;
	solIdToIndexMap[2] = 14;
	solIdToIndexMap[18] = 15;
	solIdToIndexMap[36] = 16;
	solIdToIndexMap[39] = 17;
	solIdToIndexMap[40] = 18;
	solIdToIndexMap[41] = 19;


		// Getting the position of the particluar SolModel in the array  
		//solIdIndex = solIdToIndexMap[solId];  

    auto itr = solIdToIndexMap.find(solId);
    if (itr != solIdToIndexMap.end()){
        solIdIndex = itr->second; 
    }else{
        solIdIndex = solIdToIndexMap.begin()->second;
    }
		// Coverting the urgency into a position in the array 
		int urgCounter = int(urgency*10) - 1; 
		for (int velCounter = 23; velCounter >= 0; velCounter--) 
		{ 
			// 
			// Exact Match with the dist in the Array 
			// 
			bool exactMatch = ((time - cTIME[solIdIndex][velCounter][urgCounter]) > -0.01 && 
				(time - cTIME[solIdIndex][velCounter][urgCounter]) <= 0.00); 

			// 
			// Need a velocity that makes LC in less distance than actual time to intrscn 
			// 5ft less in this case 
			// 
			bool matchTier1 = ((time - cTIME[solIdIndex][velCounter][urgCounter]) > 0.00 && 
				(time - cTIME[solIdIndex][velCounter][urgCounter]) < 1.00); 
			// 
			// 10ft less in this case 
			// 
			bool matchTier2 = ((time - cTIME[solIdIndex][velCounter][urgCounter]) > 1.00 && 
				(time - cTIME[solIdIndex][velCounter][urgCounter]) < 1.50); 

			if (exactMatch) 
			{ 
				velocity = double(velCounter + 1) * 5.0f; 
#ifdef DEBUG_SEARCH_VEL 
				gout << endl << "Time-exactMatch---velocity: " << velocity << "  velCounter: ";  
				gout << velCounter << "   UrgCounter: "; 
				gout << urgCounter << endl <<  endl; 
#endif 
				matchFound = exactMatch; 
				break; 
			} 
			else if (matchTier1) 
			{ 
				velocity = double(velCounter + 1) * 5.0f; 
				urgency = double(urgCounter + 1) / 10.0f; 
#ifdef DEBUG_SEARCH_VEL 
				gout << "Time-matchTier1---velocity: " << velocity << "  velCounter: ";  
				gout << velCounter << "   UrgCounter: "; 
				gout << urgCounter << endl <<  endl; 
#endif 
				matchFound = matchTier1; 
				break; 
			} 
			else if (matchTier2) 
			{ 
				velocity = double(velCounter + 1) * 5.0f; 
#ifdef DEBUG_SEARCH_VEL 
				gout << "Time--matchTier2---velocity: " << velocity << "  velCounter: ";  
				gout << velCounter << "   UrgCounter: "; 
				gout << urgCounter << endl << endl; 
#endif 
				matchFound = matchTier2; 
				break; 
			} 
		} 
	} 
	else 
	{
		matchFound = false; 
	}
	return matchFound; 
} // End of LcLookupVelocityfromTime() 

///////////////////////////////////////////////////////////////////////////// 
//
// Description: Overloaded function with extra parameter as the 
//				reference to a vector having list of matched 
//				velocities. When time and solId  are given,
//				this function returns a vector consisting of 
//				velocities that complete lanechange in the 
//				desired time
//				If the desired time is not exactly matched, it 
//				will give the velocity of that time that is closest 
//				to the input time 

// Remarks:
//
// Arguments:
//   time		- time taken to execute a lanechange (in seconds)
//   solId		- SolId of vehicle
//   velocity	- (output) Matched velocities needed to complete the lane
//    			  change in desired time are stored in this vector (in mph).
//
// Returns: A boolean to indicate if velocity found.
//
//////////////////////////////////////////////////////////////////////////////
bool  
LcLookupVelocityfromTime( 
				double time,  
				int solId,  
				vector <vector<double> > &v 
				) 
{ 
	// 
	// Checking inputs 
	// 
	bool withinLimits = (time >= 0.0); 
	bool matchFound = false; 
	if (withinLimits) 
	{ 
		// Adding  solid to map 
	solIdToIndexMap[1] = 0;
	solIdToIndexMap[19] = 1;
	solIdToIndexMap[35] = 2;
	solIdToIndexMap[37] = 3;
	solIdToIndexMap[38] = 4;
	solIdToIndexMap[42] = 5;
	solIdToIndexMap[43] = 6;
	solIdToIndexMap[56] = 7;
	solIdToIndexMap[67] = 8;
	solIdToIndexMap[69] = 9;
	solIdToIndexMap[71] = 10;
	solIdToIndexMap[72] = 11;
	solIdToIndexMap[84] = 12;
	solIdToIndexMap[101] = 13;
	solIdToIndexMap[2] = 14;
	solIdToIndexMap[18] = 15;
	solIdToIndexMap[36] = 16;
	solIdToIndexMap[39] = 17;
	solIdToIndexMap[40] = 18;
	solIdToIndexMap[41] = 19;


		// Getting the position of the particluar SolModel in the array  
		//solIdIndex = solIdToIndexMap[solId];  

    auto itr = solIdToIndexMap.find(solId);
    if (itr != solIdToIndexMap.end()){
        solIdIndex = itr->second; 
    }else{
        solIdIndex = solIdToIndexMap.begin()->second;
    }
		// 
		// Pair vector to hold the matching vel and urg 
		// 
		vector<double> matchPair; 

		for (int velCounter = 23; velCounter >= 0; velCounter--) 
		{ 
			for (int urgCounter = 9; urgCounter >= 0; urgCounter--) 
			{ 
				// 
				// Exact Match with the time in the TIME Array 
				// 
				bool exactMatch = ((time - cTIME[solIdIndex][velCounter][urgCounter]) > -0.01 && 
					(time - cTIME[solIdIndex][velCounter][urgCounter]) <= 0.00); 

				// 
				// Need a velocity that makes LC in less time than actual time to intrscn 
				// 0.5 second less in this case 
				// 
				bool matchTier1 = ((time - cTIME[solIdIndex][velCounter][urgCounter]) > 0.00 && 
					(time - cTIME[solIdIndex][velCounter][urgCounter]) < 0.50); 
				// 
				// Between 1.0 and 1.5 secs 
				// 
				bool matchTier2 = ((time - cTIME[solIdIndex][velCounter][urgCounter]) > 1.00 && 
					(time - cTIME[solIdIndex][velCounter][urgCounter]) < 1.00); 

				if (exactMatch) 
				{ 
					// 
					// Pushing the velocity and urgency into the vector matchPair 
					// 
					matchPair.push_back(double(velCounter + 1) * 5.0f); 
					matchPair.push_back(double(urgCounter + 1) / 10.0f); 

					// Pushing this pair vector into the main vector 
					v.push_back(matchPair); 

					// Clearing the vector 
					matchPair.clear(); 
#ifdef DEBUG_SEARCH_VEL 
					gout << "Time-ExactMatch  ";  
					gout << "vel: " << double(velCounter + 1) * 5.0f << " urg: "; 
					gout << double(urgCounter + 1) / 10.0f; 
					gout << "   Vector: " << matchPair[0] << "|" << matchPair[1] << endl; 
#endif 
					matchFound = exactMatch; 
					exactMatch = false; 

				} 
				else if(matchTier1) 
				{ 
					matchPair.push_back(double(velCounter + 1) * 5.0f); 
					matchPair.push_back(double(urgCounter + 1) / 10.0f); 

					// Pushing this pair vector into the main vector 
					v.push_back(matchPair); 

					// Clearing the vector 
					matchPair.clear(); 
#ifdef DEBUG_SEARCH_VEL 
					gout << "Time-matchTier1  "; 
					gout << "vel: " << double(velCounter + 1) * 5.0f << " urg: "; 
					gout << double(urgCounter + 1) / 10.0f; 
					gout << "   Vector: " << matchPair[0] << "|" << matchPair[1] << endl; 
#endif 
					matchFound = matchTier1; 
					matchTier1 = false; 

				} 
				else if (matchTier2) 
				{ 
					matchPair.push_back(double(velCounter + 1) * 5.0f); 
					matchPair.push_back(double(urgCounter + 1) / 10.0f); 

					// Pushing this pair vector into the main vector 
					v.push_back(matchPair); 

					// Clearing the vector 
					matchPair.clear(); 
#ifdef DEBUG_SEARCH_VEL 
					gout << "Time-matchTier2  "; 
					gout << "vel: " << double(velCounter + 1) * 5.0f << " urg: "; 
					gout << double(urgCounter + 1) / 10.0f; 
					gout << "   Vector: " << matchPair[0] << "|" << matchPair[1] << endl; 
#endif 
					matchFound = matchTier2; 
					matchTier2 = false; 

				} 
			} 
		} 
	} 
	else { 
		matchFound = false; 
	} 
	return matchFound; 
} // End of LcLookupVelocityfromTime() 

///////////////////////////////////////////////////////////////////////////////
//
// Description: This function when velocity and distance are 
//				given, queries the data tables and returns the  .  
//				urgency with which lanechange can be achieved
//				in the desired distance.If the desired distance, 
//				is not exactly matched, it will give the urgency 
//				that is closest to the input Distance.
// Remarks:
//
// Arguments:
//   velocity	- velocity in 'mph' ranging from 5.0 - 120.0 mph
//   longDist	- distance travelled to complete the lane (in feet)
//   solId		- SolId of vehicle
//   urgency	- (output) Urgency applied to complete the lane
//    			  change in given distance ( ranges from 0.1 - 1.0).
//
// Returns: A boolean to indicate if urgency was found.
//
//////////////////////////////////////////////////////////////////////////////
bool
LcLookupUrgencyfromDist(
			double velocity, 
			double Dist, 
			int solId, 
			double& urgency 
			)
{
	// Adding  solid to map
	solIdToIndexMap[1] = 0;
	solIdToIndexMap[19] = 1;
	solIdToIndexMap[35] = 2;
	solIdToIndexMap[37] = 3;
	solIdToIndexMap[38] = 4;
	solIdToIndexMap[42] = 5;
	solIdToIndexMap[43] = 6;
	solIdToIndexMap[56] = 7;
	solIdToIndexMap[67] = 8;
	solIdToIndexMap[69] = 9;
	solIdToIndexMap[71] = 10;
	solIdToIndexMap[72] = 11;
	solIdToIndexMap[84] = 12;
	solIdToIndexMap[101] = 13;
	solIdToIndexMap[2] = 14;
	solIdToIndexMap[18] = 15;
	solIdToIndexMap[36] = 16;
	solIdToIndexMap[39] = 17;
	solIdToIndexMap[40] = 18;
	solIdToIndexMap[41] = 19;


	// Getting the position of the particluar SolModel in the array 
	//solIdIndex = solIdToIndexMap[solId]; 

    auto itr = solIdToIndexMap.find(solId);
    if (itr != solIdToIndexMap.end()){
        solIdIndex = itr->second; 
    }else{
        solIdIndex = solIdToIndexMap.begin()->second;
    }	
	double tempDist[10];

	bool withinLimits = (velocity > 0.0 && velocity <= 120.0); // Testing the input velocity;
	// 
	// velocity is a multiple of 5
	//
	if ( int(velocity)%5 == 0 )
	{
		int V1 = int(velocity/5 - 1);

		//
		// Creating a new array to hold the Distances
		//
		for ( int i = 0; i < 10; i++)
		{
			tempDist[i] = cLONGDIST[solIdIndex][V1][i];
		}
	}

	//
	// velocity is NOT a multiple of 5 
	// example:23, 57,74 etc
	//
	else {
		int V1 = int((velocity)/5 -1);
		int V2 = V1 + 1;

		//
		// Longitudinal Distance
		//
		for ( int i = 0; i < 10; i++)
		{
			//
			// Interpolating the Distances for a given Velocity and 
			// sending that into another array tempDist
			//
			double diffDist = cLONGDIST[solIdIndex][V2][i] - cLONGDIST[solIdIndex][V1][i];
				
			tempDist[i] = cLONGDIST[solIdIndex][V1][i] 
			+ ( diffDist * (velocity - (double(V1) * 5.0 + 5.0) ) 
				/ ((double(V2) * 5.0 + 5.0) - (double(V1) * 5.0 + 5.0)) ); 

		}
	}
	
	bool exactMatchFound = false; 
	bool functionMatchFound = false;

	for (int i = 0; i < 10; i++)
	{ 
		//
		// Dist exactly matches the one given in the table
		//
		exactMatchFound = ((Dist - tempDist[i]) >= 0.0 && (Dist - tempDist[i]) <= 1.0);
		if(exactMatchFound) {
			
			urgency = (double(i+1))/10;

#ifdef DEBUG_SEARCH_DIST
			gout << Dist << " " << tempDist[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif

			functionMatchFound = exactMatchFound;
			break;
		}
	}

	if(!exactMatchFound) 
	{ 
		for (int i = 0; i < 10; i++)
		{ 
			//
			// Dist exactly matches the one given in the table
			//
			bool approxDistMatchTier1 = ((Dist - tempDist[i]) >= -3.0 && (Dist - tempDist[i]) < 0.0);
			bool approxDistMatchTier2 = ( (Dist -  tempDist[i]) > 1.0 && (Dist - tempDist[i]) <= 2.5);
			bool approxDistMatchTier3 = ( (Dist -  tempDist[i]) > 2.5 && (Dist - tempDist[i]) <= 5.5);

			if(approxDistMatchTier1) {

				urgency = (double(i+1))/10;

#ifdef DEBUG_SEARCH_DIST
				gout << Dist << " " << tempDist[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif

				functionMatchFound = approxDistMatchTier1;
				break;
			}

			//
			// 1.0 - 2.5 feet greater than the input Dist
			//
			else if(approxDistMatchTier2) {

				urgency = (double(i+1))/10;

#ifdef DEBUG_SEARCH_DIST
				gout << Dist << " " << tempDist[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif
				functionMatchFound = approxDistMatchTier2;
				break;
			}
			//
			// 2.5 - 5.5 feet greater than the input Dist
			//
			else if(approxDistMatchTier3) {

				urgency = (double(i+1))/10;
#ifdef DEBUG_SEARCH_DIST
				gout << Dist << " " << tempDist[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif
				functionMatchFound = approxDistMatchTier3;
				break;
			}
			else {
				functionMatchFound = false;
			}
		}
	}
	return (functionMatchFound && withinLimits);
} // End of LcLookupUrgencyfromDist() 

//////////////////////////////////////////////////////////////////////////////
//
// Description: This function when velocity and time are 
//				given, queries the data tables and returns the  .  
//				urgency with which lanechange can be 
//				achieved in the desired time.If the desired 
//				time is not exactly matched,it will give the urgency 
//				that is closest to the input time.
// Remarks:
//
// Arguments:
//   velocity	- velocity in 'mph' ranging from 5.0 - 120.0 mph
//   time		- time in which to complete the lane (in seconds)
//   solId		- SolId of vehicle
//   urgency	- (output) Urgency applied to complete the lane
//    			  change in given distance ( ranges from 0.1 - 1.0).
//
// Returns: A boolean to indicate if urgency was found.
//
//////////////////////////////////////////////////////////////////////////////
bool
LcLookupUrgencyfromTime(
			double velocity, 
			double time, 
			int solId, 
			double& urgency 
			)
{
	// Adding  solid to map
	solIdToIndexMap[1] = 0;
	solIdToIndexMap[19] = 1;
	solIdToIndexMap[35] = 2;
	solIdToIndexMap[37] = 3;
	solIdToIndexMap[38] = 4;
	solIdToIndexMap[42] = 5;
	solIdToIndexMap[43] = 6;
	solIdToIndexMap[56] = 7;
	solIdToIndexMap[67] = 8;
	solIdToIndexMap[69] = 9;
	solIdToIndexMap[71] = 10;
	solIdToIndexMap[72] = 11;
	solIdToIndexMap[84] = 12;
	solIdToIndexMap[101] = 13;
	solIdToIndexMap[2] = 14;
	solIdToIndexMap[18] = 15;
	solIdToIndexMap[36] = 16;
	solIdToIndexMap[39] = 17;
	solIdToIndexMap[40] = 18;
	solIdToIndexMap[41] = 19;


	// Getting the position of the particluar SolModel in the array 
	//solIdIndex = solIdToIndexMap[solId]; 

    auto itr = solIdToIndexMap.find(solId);
    if (itr != solIdToIndexMap.end()){
        solIdIndex = itr->second; 
    }else{
        solIdIndex = solIdToIndexMap.begin()->second;
    }
	double tempTime[10];

	bool withinLimits = (velocity > 0.0 && velocity <= 120.0); // Testing the input velocity;
	// 
	// velocity is a multiple of 5
	//
	if ( int(velocity)%5 == 0 )
	{
		int V1 = int(velocity/5 - 1);
		//
		// Creating a new array to hold the Distances
		//
		for ( int i = 0; i < 10; i++)
		{
			tempTime[i] = cTIME[solIdIndex][V1][i];
		}
	} 
	//
	// velocity is NOT a multiple of 5
	// example:23, 57,74 etc
	//
	else {
		int V1 = int((velocity)/5 -1);
		int V2 = V1 + 1;
		//
		// Longitudinal Distance
		//
		for ( int i = 0; i < 10; i++)
		{
			//
			// Interpolating the Distances for a given velocity and 
			// sending that into another array tempDist
			//
			double diffTime = cTIME[solIdIndex][V2][i] - cTIME[solIdIndex][V1][i];
			tempTime[i] = cTIME[solIdIndex][V1][i] 
			+ ( diffTime * (velocity - (double(V1) * 5.0 + 5.0) ) 
			/ ((double(V2) * 5.0 + 5.0) - (double(V1) * 5.0 + 5.0)) ); 
		}
	}

	bool exactMatchFound = false;
	bool functionMatchFound;

	for (int i = 0; i < 10; i++)
	{ 
		//
		// time exactly matches the one given in the table
		//
		exactMatchFound = ( (time - tempTime[i]) >= 0.0 && (time - tempTime[i]) <= 0.01);
		if(exactMatchFound) {
			urgency = (double(i+1))/10;
#ifdef DEBUG_SEARCH_TIME
			gout << time << " " << tempTime[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif
			functionMatchFound = exactMatchFound;
			break;
		}
	} 

	if(!exactMatchFound) 
	{ 
		for (int i = 0; i < 10; i++)
		{ 
			//
			// Looking for match between -0.10 < given time < 1.5
			//
			bool approxTimeMatchTier1 = ( (time - tempTime[i]) >= -0.10 && (time - tempTime[i]) < 0.0);
			bool approxTimeMatchTier2 = ( (time -  tempTime[i]) > 0.01 && (time - tempTime[i]) <= 0.5);
			bool approxTimeMatchTier3 = ( (time -  tempTime[i]) > 0.5 && (time - tempTime[i]) <= 1.5);

			if (approxTimeMatchTier1) {
				urgency = (double(i+1))/10;
#ifdef DEBUG_SEARCH_TIME
				gout << time << " " << tempTime[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif
				functionMatchFound = approxTimeMatchTier1;
				break;
			}
			//
			// 0.01 - 1.0 seconds greater than the input Dist
			//
			else if(approxTimeMatchTier2) {
				urgency = (double(i+1))/10;
#ifdef DEBUG_SEARCH_TIME
				gout << time << " " << tempTime[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif
				functionMatchFound = approxTimeMatchTier2;
				break;
			}
			//
			// 1.0 - 2.0 seconds greater than the input Dist
			//
			else if (approxTimeMatchTier3) {
				urgency = (double(i+1))/10;
#ifdef DEBUG_SEARCH_TIME
				gout << time << " " << tempTime[i] << " " << i << " " << (double(i+1))/10 << endl;
#endif
				functionMatchFound = approxTimeMatchTier3;
				break;
			}
			else {
				functionMatchFound = false;
			}
		}
	}
	return (functionMatchFound && withinLimits);
} // End of LcLookupUrgencyfromTime() 

#ifdef DEBUG_MAIN
	//
	// Test Program
	//
	int main()
	{
		double longDist;
		double time;
		double urgency;

		double distVel;
		double timeVel;
		double timeUrg = 0.50f;
		bool urgencyFromDist = false;
		bool urgencyFromTime = false;
		//
		// Interpolation Function
		//
		bool testDistUrg = LcLookupDistTime(55.0f, 0.6f, 224, longDist, time );
		if(testDistUrg) {
			gout << "Long Dist: " << longDist << endl;
			gout << "Time: " << time << endl;
		} else{ 
			gout << "OUT OF SCOPE - No Value exists " << endl; 
		}
		//
		// Searching Urgency given Dist
		//
		urgencyFromDist = LcLookupUrgencyfromDist( 55.0f, 356.0f, 224, urgency );
		if(urgencyFromDist){
			gout << "Given Dist, Urgency is: " << urgency << endl;
		}
		else{
			gout << "OUT OF SCOPE - No URGENCY value found from Dist!!! " << endl;
		}
		//
		// Searching Urgency given Time
		//
		urgencyFromTime = LcLookupUrgencyfromTime( 55.0f, 4.5f, 224, urgency );
		if(urgencyFromTime){
			gout << "Given Time, Urgency is: " << urgency << endl;
		}
		else{
			gout << "OUT OF SCOPE - No URGENCY value found from Time!!! " << endl;
		}
		// Search Velocity from LONGDIST array

		bool velocityFromDist = LcLookupVelocityfromDist( 379.80f, 0.50f, 14, distVel);
		if (velocityFromDist) {

			//gout << "Dist---Velocity: " << distVel << endl << endl;
		}

		//
		// Vector to hold the matching vel-urg pairs.
		//
		vector <vector<double> > distVelUrg;
		bool velocityFromDistVector = LcLookupVelocityfromDist( 379.80f, 14, distVelUrg );
		if (velocityFromDistVector)
		{
			for (int i = 0; i < distVelUrg.size(); i++)
			{
				for ( int j = 0; j < distVelUrg[i].size(); j++)
				{
					gout << distVelUrg[i][j] << "|";
				}
				gout << endl;
			}	
		}
		gout << endl << endl;

		// Search Velocity from TIME array
		bool velocityFromTime = LcLookupVelocityfromTime( 7.1f, 0.50f, 14, timeVel);
		if (velocityFromTime) {

			//gout << "Time---Velocity: " << timeVel << endl;
		}

		vector <vector<double> > timeVelUrg;
		bool velocityFromTimeVector = LcLookupVelocityfromTime( 7.1f, 14, timeVelUrg);
		if (velocityFromTimeVector)
		{
			for (int i = 0; i < timeVelUrg.size(); i++)
			{
				for ( int j = 0; j < timeVelUrg[i].size(); j++)
				{
					gout << timeVelUrg[i][j] << "|";
				}
				gout << endl;
			} 
		} 


		return 0;
	}
#endif // DEBUG_MAIN
