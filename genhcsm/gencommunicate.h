/*****************************************************************************
 *
 *  (C) Copyright 1998 by National Advanced Driving Simulator and
 *  Simulation Center, the University of Iowa and The University
 *  of Iowa. All rights reserved.
 *
 *  This file has been generated by the hcsm code generator.
 *  ### DO NOT EDIT DIRECTLY ###
 *
 */


#ifndef __gencommunicate_h_INCLUDED_
#define __gencommunicate_h_INCLUDED_

#include "genhcsmglobal.h"
#include "dial.h"
#include "monitor.h"
#include <string>
using namespace std;

//////////////////////////////////////////////////////////////
// CDialint
//////////////////////////////////////////////////////////////

class CDialint : public CDial
{
public:
    CDialint( CHcsmCollection*, string );
    CDialint( const CDialint& );
    CDialint& operator=( const CDialint& );
    virtual ~CDialint(); 
    int GetValue();
    string GetValueStr();
    void SetValue( int );
    void SetValueStr(const string &);

private:
    int m_prevValue;
    int m_valueA;
    int m_valueB;
};

//////////////////////////////////////////////////////////////
// CDialdouble
//////////////////////////////////////////////////////////////

class CDialdouble : public CDial
{
public:
    CDialdouble( CHcsmCollection*, string );
    CDialdouble( const CDialdouble& );
    CDialdouble& operator=( const CDialdouble& );
    virtual ~CDialdouble(); 
    double GetValue();
    string GetValueStr();
    void SetValue( double );
    void SetValueStr(const string &);

private:
    double m_prevValue;
    double m_valueA;
    double m_valueB;
};

//////////////////////////////////////////////////////////////
// CDialstring
//////////////////////////////////////////////////////////////

class CDialstring : public CDial
{
public:
    CDialstring( CHcsmCollection*, string );
    CDialstring( const CDialstring& );
    CDialstring& operator=( const CDialstring& );
    virtual ~CDialstring(); 
    string GetValue();
    string GetValueStr();
    void SetValue( string );
    void SetValueStr(const string &);

private:
    string m_prevValue;
    string m_valueA;
    string m_valueB;
};

//////////////////////////////////////////////////////////////
// CDialfloat
//////////////////////////////////////////////////////////////

class CDialfloat : public CDial
{
public:
    CDialfloat( CHcsmCollection*, string );
    CDialfloat( const CDialfloat& );
    CDialfloat& operator=( const CDialfloat& );
    virtual ~CDialfloat(); 
    float GetValue();
    string GetValueStr();
    void SetValue( float );
    void SetValueStr(const string &);

private:
    float m_prevValue;
    float m_valueA;
    float m_valueB;
};

//////////////////////////////////////////////////////////////
// CDialbool
//////////////////////////////////////////////////////////////

class CDialbool : public CDial
{
public:
    CDialbool( CHcsmCollection*, string );
    CDialbool( const CDialbool& );
    CDialbool& operator=( const CDialbool& );
    virtual ~CDialbool(); 
    bool GetValue();
    string GetValueStr();
    void SetValue( bool );
    void SetValueStr(const string &);

private:
    bool m_prevValue;
    bool m_valueA;
    bool m_valueB;
};

//////////////////////////////////////////////////////////////
// CMonitorCRoadPos
//////////////////////////////////////////////////////////////

class CMonitorCRoadPos : public CMonitor
{
public:
    CMonitorCRoadPos( CHcsmCollection*, string );
    CMonitorCRoadPos( const CMonitorCRoadPos& );
    CMonitorCRoadPos& operator=( const CMonitorCRoadPos& );
    virtual ~CMonitorCRoadPos(); 
    CRoadPos GetValue();
    string GetValueStr();
    void SetValue( CRoadPos );
    void SetValueStr(const string &);

private:
    CRoadPos m_prevValue;
    CRoadPos m_valueA;
    CRoadPos m_valueB;
};

//////////////////////////////////////////////////////////////
// CMonitorCCrdr
//////////////////////////////////////////////////////////////

class CMonitorCCrdr : public CMonitor
{
public:
    CMonitorCCrdr( CHcsmCollection*, string );
    CMonitorCCrdr( const CMonitorCCrdr& );
    CMonitorCCrdr& operator=( const CMonitorCCrdr& );
    virtual ~CMonitorCCrdr(); 
    CCrdr GetValue();
    string GetValueStr();
    void SetValue( CCrdr );
    void SetValueStr(const string &);

private:
    CCrdr m_prevValue;
    CCrdr m_valueA;
    CCrdr m_valueB;
};

//////////////////////////////////////////////////////////////
// CMonitorint
//////////////////////////////////////////////////////////////

class CMonitorint : public CMonitor
{
public:
    CMonitorint( CHcsmCollection*, string );
    CMonitorint( const CMonitorint& );
    CMonitorint& operator=( const CMonitorint& );
    virtual ~CMonitorint(); 
    int GetValue();
    string GetValueStr();
    void SetValue( int );
    void SetValueStr(const string &);

private:
    int m_prevValue;
    int m_valueA;
    int m_valueB;
};

//////////////////////////////////////////////////////////////
// CMonitorbool
//////////////////////////////////////////////////////////////

class CMonitorbool : public CMonitor
{
public:
    CMonitorbool( CHcsmCollection*, string );
    CMonitorbool( const CMonitorbool& );
    CMonitorbool& operator=( const CMonitorbool& );
    virtual ~CMonitorbool(); 
    bool GetValue();
    string GetValueStr();
    void SetValue( bool );
    void SetValueStr(const string &);

private:
    bool m_prevValue;
    bool m_valueA;
    bool m_valueB;
};

//////////////////////////////////////////////////////////////
// CMonitorstring
//////////////////////////////////////////////////////////////

class CMonitorstring : public CMonitor
{
public:
    CMonitorstring( CHcsmCollection*, string );
    CMonitorstring( const CMonitorstring& );
    CMonitorstring& operator=( const CMonitorstring& );
    virtual ~CMonitorstring(); 
    string GetValue();
    string GetValueStr();
    void SetValue( string );
    void SetValueStr(const string &);

private:
    string m_prevValue;
    string m_valueA;
    string m_valueB;
};



#endif
