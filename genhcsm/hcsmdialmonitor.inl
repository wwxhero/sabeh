/*****************************************************************************
 *
 *  (C) Copyright 1998 by National Advanced Driving Simulator and
 *  Simulation Center, the University of Iowa and The University
 *  of Iowa. All rights reserved.
 *
 *  This file has been generated by the hcsm code generator.
 *  ### DO NOT EDIT DIRECTLY ###
 *
 */


//////////////////////////////////////////////////////////////////
//
// Description: Virtual methods for dials overidden by CHcsm
//  subclasses.
//
// Remarks: 
//  If the user uses the HCSM system properly, this function should
//  never be called because a sub-class should reimplement this
//  function if it has dials.  If this function gets called, then
//  it is most likely trying to set the dial for an HCSM that has
//  no dials defined inside it or has forgotten to define this
//  function inside the class that represents the HCSM.
//
// Arguments: 
//     cDialName - name of the dial
//     value - value to which the dial is set
//
// Returns: false
//
//////////////////////////////////////////////////////////////////
inline virtual bool
SetDialByName( const string& cDialName, const int& )
{

    cout << MyName()
         << "::SetDialByName has no dial named "
         << cDialName << endl;
    return false;

}

inline virtual bool
SetDialByName( const string& cDialName, const double& )
{

    cout << MyName()
         << "::SetDialByName has no dial named "
         << cDialName << endl;
    return false;

}

inline virtual bool
SetDialByName( const string& cDialName, const string& )
{

    cout << MyName()
         << "::SetDialByName has no dial named "
         << cDialName << endl;
    return false;

}

inline virtual bool
SetDialByName( const string& cDialName, const float& )
{

    cout << MyName()
         << "::SetDialByName has no dial named "
         << cDialName << endl;
    return false;

}

inline virtual bool
SetDialByName( const string& cDialName, const bool& )
{

    cout << MyName()
         << "::SetDialByName has no dial named "
         << cDialName << endl;
    return false;

}

inline virtual bool
IsDialActiveByNameStr( const string& cDialName )
{

    cout << MyName()
         << "::IsDialActiveByNameStr has no dial named "
         << cDialName << endl;
    return false;

}

inline virtual bool
SetDialByNameStr( const string& cDialName, const string& )
{

    cout << MyName()
         << "::SetDialByNameStr has no dial named "
         << cDialName << endl;
    return false;

}

//////////////////////////////////////////////////////////////////
//
// Description: Virtual methods for reseting dials overidden
//  by CHcsm subclasses.
//
// Remarks: 
//  If the user uses the HCSM system properly, this function should
//  never be called because a sub-class should reimplement this
//  function if it has dials.  If this function gets called, then
//  it is most likely trying to reset the dial for an HCSM that has
//  no dials defined inside it or has forgotten to define this
//  function inside the class that represents the HCSM.
//
// Arguments: 
//     cDialName - name of the dial
//
// Returns: nothing
//
//////////////////////////////////////////////////////////////////

inline virtual bool
ResetDialByName( const string& cDialName )
{
    cout << MyName()
         << "::ResetDialByName has no dial named "
         << cDialName << endl;
    return false;
}

//////////////////////////////////////////////////////////////////
//
// Description: Virtual methods for monitors overidden by CHcsm
//  subclasses.
//
// Remarks: 
//  If the user uses the HCSM system properly, this function should
//  never be called because a sub-class should reimplement this
//  function if it has dials.  If this function gets called, then
//  it is most likely trying to set the dial for an HCSM that has
//  no dials defined inside it or has forgotten to define this
//  function inside the class that represents the HCSM.
//
// Arguments: 
//     monitorName - name of the monitor
//     value - place where value of monitor is put
//
// Returns: false
//
//////////////////////////////////////////////////////////////////
inline virtual bool
GetMonitorByName( const string& monitorName, CRoadPos* )
{

    cout << MyName()
         << "::GetMonitorByName has no monitor named "
         << monitorName << endl;
    return false;

}

inline virtual bool
GetMonitorByName( const string& monitorName, CCrdr* )
{

    cout << MyName()
         << "::GetMonitorByName has no monitor named "
         << monitorName << endl;
    return false;

}

inline virtual bool
GetMonitorByName( const string& monitorName, int* )
{

    cout << MyName()
         << "::GetMonitorByName has no monitor named "
         << monitorName << endl;
    return false;

}

inline virtual bool
GetMonitorByName( const string& monitorName, bool* )
{

    cout << MyName()
         << "::GetMonitorByName has no monitor named "
         << monitorName << endl;
    return false;

}

inline virtual bool
GetMonitorByName( const string& monitorName, string* )
{

    cout << MyName()
         << "::GetMonitorByName has no monitor named "
         << monitorName << endl;
    return false;

}

inline virtual bool
GetMonitorByNameStr( const string monitorName, const string* )
{

    cout << MyName()
         << "::GetMonitorByNameStr has no monitor named "
         << monitorName << endl;
    return false;

}

